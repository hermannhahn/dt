/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/dt.ts":
/*!*******************!*\
  !*** ./src/dt.ts ***!
  \*******************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst extra_typings_1 = __webpack_require__(/*! @commander-js/extra-typings */ \"@commander-js/extra-typings\");\nconst fs_1 = __importDefault(__webpack_require__(/*! fs */ \"fs\"));\nconst cli_1 = __webpack_require__(/*! modules/cli */ \"./src/modules/cli.ts\");\nconst check_update_1 = __webpack_require__(/*! utils/check-update */ \"./src/utils/check-update.ts\");\nconst terminal_log_1 = __webpack_require__(/*! utils/terminal-log */ \"./src/utils/terminal-log.ts\");\nfunction dt() {\n  // Get version\n  const version = fs_1.default.readFileSync('version.txt', 'utf-8');\n  // version command\n  extra_typings_1.program.version(version, '-v, --version', 'output the current dt version').alias('version').description('Tools for developers');\n  // test command\n  extra_typings_1.program.command('ping').description('test command');\n  // init command\n  extra_typings_1.program.command('init').description('initialize project');\n  // install command\n  extra_typings_1.program.command('install').description('install requirements and dependencies');\n  // save command\n  extra_typings_1.program.command('save').description('save project').option('-m, --message <message>', 'commit message');\n  // patch command\n  extra_typings_1.program.command('new').argument('<patch|update|upgrade>').description('create new patch, update or upgrade.');\n  // deploy command\n  extra_typings_1.program.command('deploy').option('npm').description('deploy project');\n  // upgrade command\n  extra_typings_1.program.command('template').option('list').option('install').description('Project commands');\n  // Parse arguments\n  extra_typings_1.program.parse(process.argv);\n  // Arguments classifcation\n  const command = extra_typings_1.program.args[0];\n  const option = extra_typings_1.program.args[1];\n  const message = extra_typings_1.program.args[2];\n  const args = extra_typings_1.program.args.slice(2);\n  // Command handler\n  if (command === 'ping') terminal_log_1.terminal.success('pong');\n  if (command === 'init') cli_1.Cli.init(args);\n  if (command === 'install') cli_1.Cli.install();\n  if (command === 'save') cli_1.Cli.save(message);\n  if (command === 'new') {\n    if (option === 'patch') cli_1.Cli.new.patch();\n    if (option === 'update') cli_1.Cli.new.update();\n    if (option === 'upgrade') cli_1.Cli.new.upgrade();\n  }\n  if (command === 'template') {\n    if (option === 'list') cli_1.Cli.template.list();\n    if (option === 'install') cli_1.Cli.template.install();\n  }\n  if (command === 'deploy') {\n    if (option === 'npm') {\n      cli_1.Cli.deploy({\n        npm: true\n      });\n    } else {\n      cli_1.Cli.deploy();\n    }\n  }\n  (0, check_update_1.checkUpdate)();\n}\nexports[\"default\"] = dt;\ndt();\n\n//# sourceURL=webpack://@hahnd/dt/./src/dt.ts?");

/***/ }),

/***/ "./src/libs/git.ts":
/*!*************************!*\
  !*** ./src/libs/git.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Git = void 0;\nconst branchGuard_1 = __webpack_require__(/*! libs/git/branchGuard */ \"./src/libs/git/branchGuard.ts\");\nconst configure_1 = __webpack_require__(/*! libs/git/configure */ \"./src/libs/git/configure.ts\");\nconst init_1 = __webpack_require__(/*! libs/git/init */ \"./src/libs/git/init.ts\");\nconst requirements_1 = __webpack_require__(/*! libs/git/requirements */ \"./src/libs/git/requirements.ts\");\n// Import prompts\nconst prompts = __webpack_require__(/*! prompts */ \"prompts\");\n// Git class\nclass Git {}\nGit.requirements = requirements_1.Requirements;\nGit.init = init_1.Init;\nGit.configure = configure_1.Configure;\nGit.branchGuard = branchGuard_1.branchGuard;\nexports.Git = Git;\n\n//# sourceURL=webpack://@hahnd/dt/./src/libs/git.ts?");

/***/ }),

/***/ "./src/libs/git/branchGuard.ts":
/*!*************************************!*\
  !*** ./src/libs/git/branchGuard.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.branchGuard = void 0;\nconst protectedBranches_1 = __webpack_require__(/*! libs/git/protectedBranches */ \"./src/libs/git/protectedBranches.ts\");\nconst command_runner_1 = __webpack_require__(/*! utils/command-runner */ \"./src/utils/command-runner.ts\");\nconst terminal_log_1 = __webpack_require__(/*! utils/terminal-log */ \"./src/utils/terminal-log.ts\");\n// Git requirements\nconst branchGuard = async () => {\n  // Check if is main or master branch\n  const branch = new command_runner_1.Command(\"git branch --show-current\");\n  if (branch.error) {\n    terminal_log_1.terminal.error(branch.error);\n    process.exit(1);\n  }\n  if (protectedBranches_1.protectedBranches.includes(branch.toString())) {\n    terminal_log_1.terminal.log(\"error\", \"You cannot save changes on production branch.\");\n    console.log(`\n\nIf you want update production branch, use \\x1b[1mdt deploy\\x1b[0m command\" on version branch.\n\n\\x1b[1mExample:\\x1b[0m\n\\x1b[1mdt new patch\\x1b[0m (create new patch version)\n\\x1b[1mdt save\\x1b[0m (save changes)\n\\x1b[1mdt deploy\\x1b[0m (deploy new version to production branch)\n`);\n    process.exit(1);\n  }\n};\nexports.branchGuard = branchGuard;\n\n//# sourceURL=webpack://@hahnd/dt/./src/libs/git/branchGuard.ts?");

/***/ }),

/***/ "./src/libs/git/configure.ts":
/*!***********************************!*\
  !*** ./src/libs/git/configure.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Configure = void 0;\nconst command_runner_1 = __webpack_require__(/*! utils/command-runner */ \"./src/utils/command-runner.ts\");\nconst terminal_log_1 = __webpack_require__(/*! utils/terminal-log */ \"./src/utils/terminal-log.ts\");\nconst gpg_1 = __webpack_require__(/*! ./gpg */ \"./src/libs/git/gpg.ts\");\nconst prompts = __webpack_require__(/*! prompts */ \"prompts\");\n// Git requirements\nconst Configure = async () => {\n  // Get git user\n  let name = new command_runner_1.Command(\"git config --global user.name\");\n  // If git user is not configured\n  if (!name.result) {\n    terminal_log_1.terminal.logInline(\"user\", \"Git user is not configured.\");\n    // Ask for git user\n    name = await prompts([{\n      type: \"text\",\n      name: \"name\",\n      message: \"Enter your name\"\n    }]);\n    // Configure git user\n    const configUser = new command_runner_1.Command(`git config --global user.name \"${name}\"`);\n    if (configUser.error) {\n      terminal_log_1.terminal.error(configUser.error);\n      process.exit(1);\n    }\n    terminal_log_1.terminal.log(\"user\", \"Git user has been configured.\");\n  }\n  // Get git email\n  let email = new command_runner_1.Command(\"git config --global user.email\");\n  // If git email is not configured\n  if (!email.result) {\n    terminal_log_1.terminal.logInline(\"email\", \"Git email is not configured.\");\n    // Ask for git email\n    email = await prompts([{\n      type: \"text\",\n      name: \"email\",\n      message: \"Enter your email\"\n    }]);\n    // Configure git email\n    const configEmail = new command_runner_1.Command(`git config --global user.email \"${email}\"`);\n    if (configEmail.error) {\n      terminal_log_1.terminal.error(configEmail.error);\n      process.exit(1);\n    }\n    terminal_log_1.terminal.log(\"email\", \"Git email has been configured.\");\n  }\n  // Configure git gpg\n  const gpg = new gpg_1.Gpg();\n  await gpg.configure();\n};\nexports.Configure = Configure;\n\n//# sourceURL=webpack://@hahnd/dt/./src/libs/git/configure.ts?");

/***/ }),

/***/ "./src/libs/git/gpg.ts":
/*!*****************************!*\
  !*** ./src/libs/git/gpg.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Gpg = void 0;\nconst command_runner_1 = __webpack_require__(/*! utils/command-runner */ \"./src/utils/command-runner.ts\");\nconst terminal_log_1 = __webpack_require__(/*! utils/terminal-log */ \"./src/utils/terminal-log.ts\");\nclass Gpg {\n  constructor() {\n    this.KEY_ID_REGEX = /\\/([A-F0-9]{16,})/i;\n  }\n  async configure() {\n    // Set git to use GPG signing\n    const enableSign = new command_runner_1.Command(\"git config --global commit.gpgsign true\");\n    if (enableSign.error) {\n      terminal_log_1.terminal.error(enableSign.error);\n      process.exit(1);\n    }\n    // Check if gpg key is already configured\n    const gpgKey = new command_runner_1.Command(\"git config --global user.signingkey\");\n    // If git gpg key is not configured\n    if (!gpgKey.result) {\n      terminal_log_1.terminal.log(\"crypt\", \"GPG key is not configured.\");\n      // Check if existing key is found\n      const existingKeyId = this.getExistingKeyId();\n      // If existing key is found, use it\n      if (existingKeyId) {\n        terminal_log_1.terminal.log(\"crypt\", `Existing GPG key found with ID ${existingKeyId}`);\n        await this.setGitConfigWithKeyId(existingKeyId);\n        this.printPublicKey(existingKeyId);\n        // If no existing key is found, generate a new one\n      } else {\n        terminal_log_1.terminal.log(\"decrypt\", \"No existing GPG key found.\");\n        const newKeyId = await this.generateGpgKey();\n        await this.setGitConfigWithKeyId(newKeyId);\n        this.printPublicKey(newKeyId);\n      }\n    }\n  }\n  async getExistingKeyId() {\n    var _a;\n    try {\n      const output = new command_runner_1.Command(\"gpg --list-keys --keyid-format LONG\").toString();\n      const match = output.match(this.KEY_ID_REGEX);\n      return (_a = match === null || match === void 0 ? void 0 : match[1]) !== null && _a !== void 0 ? _a : null;\n    } catch (error) {\n      terminal_log_1.terminal.error(\"No GPG keys\", error);\n      return null;\n    }\n  }\n  async generateGpgKey() {\n    const prompts = __webpack_require__(/*! prompts */ \"prompts\");\n    terminal_log_1.terminal.log(\"crypt\", \"Generating new GPG key...\");\n    const {\n      passphrase\n    } = await prompts([{\n      type: \"password\",\n      name: \"passphrase\",\n      message: \"Enter a passphrase for your GPG key\"\n    }]);\n    // Get git user name and email\n    const name = new command_runner_1.Command(\"git config --global user.name\").toString();\n    const email = new command_runner_1.Command(\"git config --global user.email\").toString();\n    // Generate GPG key\n    const generateGpg = new command_runner_1.Command(`gpg --batch --passphrase \"${passphrase}\" --quick-gen-key \"${name} <${email}>\"`);\n    if (generateGpg.error) {\n      terminal_log_1.terminal.error(generateGpg.error);\n      process.exit(1);\n    }\n    const newKeyId = this.getExistingKeyId();\n    if (!newKeyId) {\n      terminal_log_1.terminal.error(\"Error generating GPG key\");\n    } else {\n      terminal_log_1.terminal.success(`New GPG key generated with ID ${newKeyId}`);\n    }\n    return newKeyId;\n  }\n  async printPublicKey(keyId) {\n    const prompts = __webpack_require__(/*! prompts */ \"prompts\");\n    terminal_log_1.terminal.log(\"crypt\", `\\nPublic key with ID ${keyId}:`);\n    new command_runner_1.Command(`gpg --armor --export ${keyId}`, {\n      silent: true\n    });\n    // Prompt for enter\n    await prompts({\n      type: \"text\",\n      name: \"answer\",\n      message: \"Press enter after copy and paste your public key to your GitHub account. (Settings > SSH and GPG keys > New GPG key)\"\n    });\n  }\n  async setGitConfigWithKeyId(keyId) {\n    const configKey = new command_runner_1.Command(`git config user.signingkey ${keyId}`);\n    if (configKey.error) {\n      terminal_log_1.terminal.error(configKey.error);\n      process.exit(1);\n    }\n    terminal_log_1.terminal.success(\"Successfully configured GPG key\");\n  }\n}\nexports.Gpg = Gpg;\n\n//# sourceURL=webpack://@hahnd/dt/./src/libs/git/gpg.ts?");

/***/ }),

/***/ "./src/libs/git/init.ts":
/*!******************************!*\
  !*** ./src/libs/git/init.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Init = void 0;\nconst configure_1 = __webpack_require__(/*! libs/git/configure */ \"./src/libs/git/configure.ts\");\nconst command_runner_1 = __webpack_require__(/*! utils/command-runner */ \"./src/utils/command-runner.ts\");\nconst terminal_log_1 = __webpack_require__(/*! utils/terminal-log */ \"./src/utils/terminal-log.ts\");\n// Git requirements\nconst Init = async () => {\n  // Check if git is initialized\n  const topLevel = new command_runner_1.Command(\"git rev-parse --show-toplevel\");\n  // If git is not initialized\n  if (topLevel.error) {\n    if (topLevel.error.includes(\"not a git repository\")) {\n      // Initialize git\n      const init = new command_runner_1.Command(\"git init\");\n      if (init.error) {\n        terminal_log_1.terminal.error(init.error);\n        process.exit(1);\n      }\n    }\n  }\n  // Change branch to main\n  const setMain = new command_runner_1.Command(\"git branch -M main\");\n  if (setMain.error) {\n    terminal_log_1.terminal.error(setMain.error);\n    process.exit(1);\n  }\n  await (0, configure_1.Configure)();\n};\nexports.Init = Init;\n\n//# sourceURL=webpack://@hahnd/dt/./src/libs/git/init.ts?");

/***/ }),

/***/ "./src/libs/git/protectedBranches.ts":
/*!*******************************************!*\
  !*** ./src/libs/git/protectedBranches.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.protectedBranches = void 0;\nexports.protectedBranches = [\"master\", \"main\", \"production\", \"prod\", \"release\", \"current\"];\n\n//# sourceURL=webpack://@hahnd/dt/./src/libs/git/protectedBranches.ts?");

/***/ }),

/***/ "./src/libs/git/requirements.ts":
/*!**************************************!*\
  !*** ./src/libs/git/requirements.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Requirements = void 0;\nconst command_runner_1 = __webpack_require__(/*! utils/command-runner */ \"./src/utils/command-runner.ts\");\nconst terminal_log_1 = __webpack_require__(/*! utils/terminal-log */ \"./src/utils/terminal-log.ts\");\n// Git requirements\nconst Requirements = async () => {\n  // Check if chocolatey is installed\n  const chocolatey = new command_runner_1.Command('choco --version');\n  // If chocolatey is not installed\n  if (chocolatey.error) {\n    // Install chocolatey\n    terminal_log_1.terminal.logInline('package', 'Installing chocolatey...');\n    const installChocolatey = new command_runner_1.Command('powershell -NoProfile -ExecutionPolicy Bypass -Command \"iex ((New-Object System.Net.WebClient).DownloadString(\\'https://chocolatey.org/install.ps1\\'))\"');\n    if (installChocolatey.error) {\n      terminal_log_1.terminal.label('red', 'error');\n      terminal_log_1.terminal.error(installChocolatey.error);\n      process.exit(1);\n    }\n    terminal_log_1.terminal.label('green', 'OK');\n  }\n  // Check if git is installed\n  const git = new command_runner_1.Command('git --version');\n  // If git is not installed\n  if (git.error) {\n    // Install git\n    terminal_log_1.terminal.logInline('git', 'Installing git...');\n    const installGit = new command_runner_1.Command('choco install git -y');\n    if (installGit.error) {\n      terminal_log_1.terminal.label('red', 'error');\n      terminal_log_1.terminal.error(installGit.error);\n      process.exit(1);\n    }\n    terminal_log_1.terminal.label('green', 'OK');\n  }\n  // Check if gnupg is installed\n  const gnupg = new command_runner_1.Command('gpg --version');\n  // If gnupg is not installed\n  if (gnupg.error) {\n    // Install gnupg\n    terminal_log_1.terminal.logInline('crypt', 'Installing gnupg...');\n    const installGnupg = new command_runner_1.Command('choco install gnupg -y');\n    if (installGnupg.error) {\n      terminal_log_1.terminal.label('red', 'error');\n      terminal_log_1.terminal.error(installGnupg.error);\n      process.exit(1);\n    }\n    terminal_log_1.terminal.label('green', 'OK');\n  }\n  // Get gpg key if it exists\n  const gpgKey = new command_runner_1.Command('gpg --list-secret-keys --keyid-format LONG');\n  // If gpg key does not exist\n  if (!gpgKey) {\n    // ask for user name, email and signature password\n    const prompts = __webpack_require__(/*! prompts */ \"prompts\");\n    const questions = [{\n      type: 'text',\n      name: 'name',\n      message: 'What is your name?',\n      validate: value => value.length < 2 ? `Name must be at least 2 characters long` : true\n    }, {\n      type: 'text',\n      name: 'email',\n      message: 'What is your email?',\n      validate: value => value.length < 2 ? `Email must be at least 2 characters long` : true\n    }, {\n      type: 'password',\n      name: 'password',\n      message: 'What is your signature password?',\n      validate: value => value.length < 2 ? `Password must be at least 2 characters long` : true\n    }];\n    const response = await prompts(questions);\n    // Create gpg key\n    terminal_log_1.terminal.logInline('crypt', 'Creating gpg key...');\n    const createGpgKey = new command_runner_1.Command(`gpg --batch --full-generate-key <<EOF\n\t\t%echo Generating a basic OpenPGP key\n\t\tKey-Type: RSA\n\t\tKey-Length: 4096\n\t\tSubkey-Type: RSA\n\t\tSubkey-Length: 4096\n\t\tName-Real: ${response.name}\n\t\tName-Email: ${response.email}\n\t\tExpire-Date: 0\n\t\tPassphrase: ${response.password}\n\t\t%commit\n\t\t%echo done\n\t\tEOF`);\n    if (createGpgKey.error) {\n      terminal_log_1.terminal.label('red', 'error');\n      terminal_log_1.terminal.error(createGpgKey.error);\n      process.exit(1);\n    }\n    // Print gpg key and ask user to add it to github and wait for user to press enter\n    terminal_log_1.terminal.label('green', 'OK');\n    terminal_log_1.terminal.log('crypt', 'Your gpg key is:');\n    console.log(createGpgKey);\n    const enter = {\n      type: 'text',\n      name: 'enter',\n      message: 'Add this key to github and press enter to continue...'\n    };\n    await prompts(enter);\n  }\n};\nexports.Requirements = Requirements;\n\n//# sourceURL=webpack://@hahnd/dt/./src/libs/git/requirements.ts?");

/***/ }),

/***/ "./src/modules/cli.ts":
/*!****************************!*\
  !*** ./src/modules/cli.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Cli = void 0;\nconst deploy_1 = __webpack_require__(/*! modules/cli/deploy */ \"./src/modules/cli/deploy.ts\");\nconst init_1 = __webpack_require__(/*! modules/cli/init */ \"./src/modules/cli/init.ts\");\nconst install_1 = __webpack_require__(/*! modules/cli/install */ \"./src/modules/cli/install.ts\");\nconst new_1 = __webpack_require__(/*! modules/cli/new */ \"./src/modules/cli/new.ts\");\nconst save_1 = __webpack_require__(/*! modules/cli/save */ \"./src/modules/cli/save.ts\");\nconst template_1 = __webpack_require__(/*! modules/cli/template */ \"./src/modules/cli/template.ts\");\nclass Cli {}\nCli.save = save_1.Save;\nCli.new = new_1.New;\nCli.init = init_1.Init;\nCli.install = install_1.Install;\nCli.template = template_1.Template;\nCli.deploy = deploy_1.Deploy;\nexports.Cli = Cli;\n\n//# sourceURL=webpack://@hahnd/dt/./src/modules/cli.ts?");

/***/ }),

/***/ "./src/modules/cli/deploy.ts":
/*!***********************************!*\
  !*** ./src/modules/cli/deploy.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Deploy = void 0;\nconst cli_1 = __webpack_require__(/*! modules/cli */ \"./src/modules/cli.ts\");\nconst project_1 = __webpack_require__(/*! modules/project */ \"./src/modules/project.ts\");\nconst command_runner_1 = __webpack_require__(/*! utils/command-runner */ \"./src/utils/command-runner.ts\");\nconst terminal_log_1 = __webpack_require__(/*! utils/terminal-log */ \"./src/utils/terminal-log.ts\");\nconst Deploy = async opts => {\n  // Save first\n  await cli_1.Cli.save();\n  terminal_log_1.terminal.log('package', 'Starting deployment...');\n  // Go to root directory\n  const rootDir = project_1.Project.rootDir();\n  process.chdir(rootDir);\n  // Check if package.json exists\n  await project_1.Project.requirements();\n  const packageJson = await project_1.Project.packageJson();\n  // Get version branch name\n  const versionBranch = packageJson.version;\n  // Go to main branch\n  terminal_log_1.terminal.log('git', 'Checking out to production branch...');\n  const production = new command_runner_1.Command(`git checkout main`);\n  if (production.error) {\n    terminal_log_1.terminal.log('error', production.error);\n    process.exit(1);\n  }\n  // Pull changes\n  terminal_log_1.terminal.logInline('pull', 'Pulling changes...');\n  const pull = new command_runner_1.Command(`git pull`);\n  if (pull.error) {\n    terminal_log_1.terminal.log('error', pull.error);\n    process.exit(1);\n  }\n  terminal_log_1.terminal.label('green', 'DONE');\n  // Merge version branch into main branch\n  terminal_log_1.terminal.logInline('merge', `Promoting version ${versionBranch} into production...`);\n  const merge = new command_runner_1.Command(`git merge ${versionBranch}`);\n  if (merge.error) {\n    terminal_log_1.terminal.log('error', merge.error);\n    process.exit(1);\n  }\n  terminal_log_1.terminal.label('green', 'DONE');\n  // Push changes\n  terminal_log_1.terminal.logInline('push', 'Pushing changes...');\n  const pushProduction = new command_runner_1.Command(`git push`);\n  if (pushProduction.error) {\n    terminal_log_1.terminal.log('error', pushProduction.error);\n    process.exit(1);\n  }\n  terminal_log_1.terminal.label('green', 'DONE');\n  // Go to version branch\n  terminal_log_1.terminal.logInline('git', 'Checking out to version branch...');\n  const version = new command_runner_1.Command(`git checkout ${versionBranch}`);\n  if (version.error) {\n    terminal_log_1.terminal.log('error', version.error);\n    process.exit(1);\n  }\n  terminal_log_1.terminal.label('green', 'DONE');\n  // Save version\n  await cli_1.Cli.save();\n  if (opts === null || opts === void 0 ? void 0 : opts.npm) {\n    // Publish release on npm\n    terminal_log_1.terminal.logInline('npm', 'Publishing release on npm...');\n    const publish = new command_runner_1.Command(`npm publish`);\n    if (publish.error) {\n      terminal_log_1.terminal.log('error', publish.error);\n      process.exit(1);\n    }\n  }\n  // Inform result\n  terminal_log_1.terminal.log('success', `Successfully deployed version ${versionBranch}!`);\n};\nexports.Deploy = Deploy;\n\n//# sourceURL=webpack://@hahnd/dt/./src/modules/cli/deploy.ts?");

/***/ }),

/***/ "./src/modules/cli/init.ts":
/*!*********************************!*\
  !*** ./src/modules/cli/init.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Init = void 0;\nconst cli_1 = __webpack_require__(/*! modules/cli */ \"./src/modules/cli.ts\");\nconst project_1 = __webpack_require__(/*! modules/project */ \"./src/modules/project.ts\");\nconst terminal_log_1 = __webpack_require__(/*! utils/terminal-log */ \"./src/utils/terminal-log.ts\");\nconst Init = async opts => {\n  // Start\n  terminal_log_1.terminal.log(\"package\", \"Initializing new project...\");\n  // Init Project\n  await project_1.Project.init();\n  // Save project\n  await cli_1.Cli.save({\n    force: true\n  });\n  // First patch\n  await cli_1.Cli.new.patch();\n  // Finish\n  terminal_log_1.terminal.success(\"New project initialized!\");\n};\nexports.Init = Init;\n\n//# sourceURL=webpack://@hahnd/dt/./src/modules/cli/init.ts?");

/***/ }),

/***/ "./src/modules/cli/install.ts":
/*!************************************!*\
  !*** ./src/modules/cli/install.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Install = void 0;\nconst git_1 = __webpack_require__(/*! libs/git */ \"./src/libs/git.ts\");\nconst project_1 = __webpack_require__(/*! modules/project */ \"./src/modules/project.ts\");\nconst terminal_log_1 = __webpack_require__(/*! utils/terminal-log */ \"./src/utils/terminal-log.ts\");\nconst Install = async opts => {\n  // Start\n  terminal_log_1.terminal.log('package', 'Installing requirements and dependencies...');\n  // Git requirements\n  await git_1.Git.requirements();\n  // Install requirements\n  await project_1.Project.installRequirements();\n  // Install dependencies\n  await project_1.Project.installDependencies();\n  // Finish\n  terminal_log_1.terminal.success('Requirements and dependencies installed!');\n};\nexports.Install = Install;\n\n//# sourceURL=webpack://@hahnd/dt/./src/modules/cli/install.ts?");

/***/ }),

/***/ "./src/modules/cli/new.ts":
/*!********************************!*\
  !*** ./src/modules/cli/new.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.New = void 0;\nconst patch_1 = __webpack_require__(/*! modules/cli/new/patch */ \"./src/modules/cli/new/patch.ts\");\nconst update_1 = __webpack_require__(/*! modules/cli/new/update */ \"./src/modules/cli/new/update.ts\");\nconst upgrade_1 = __webpack_require__(/*! modules/cli/new/upgrade */ \"./src/modules/cli/new/upgrade.ts\");\nclass New {}\nNew.patch = patch_1.Patch;\nNew.update = update_1.Update;\nNew.upgrade = upgrade_1.Upgrade;\nexports.New = New;\n\n//# sourceURL=webpack://@hahnd/dt/./src/modules/cli/new.ts?");

/***/ }),

/***/ "./src/modules/cli/new/patch.ts":
/*!**************************************!*\
  !*** ./src/modules/cli/new/patch.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Patch = void 0;\nconst cli_1 = __webpack_require__(/*! modules/cli */ \"./src/modules/cli.ts\");\nconst project_1 = __webpack_require__(/*! modules/project */ \"./src/modules/project.ts\");\nconst command_runner_1 = __webpack_require__(/*! utils/command-runner */ \"./src/utils/command-runner.ts\");\nconst terminal_log_1 = __webpack_require__(/*! utils/terminal-log */ \"./src/utils/terminal-log.ts\");\nconst Patch = async opts => {\n  // Save changes\n  //await Cli.save(opts)\n  // Go to root directory\n  const rootDir = project_1.Project.rootDir();\n  process.chdir(rootDir);\n  // Get package.json\n  const packageJson = await project_1.Project.packageJson();\n  // Get current version\n  const currentVersion = packageJson.version;\n  // Predict new version\n  const version = packageJson.version;\n  let major = int(version[0]);\n  let minor = int(version[2]);\n  let patch = int(version[4]) + 1;\n  const newVersion = `${major}.${minor}.${patch}`;\n  // Create new branch\n  terminal_log_1.terminal.logInline('branch', 'Creating new version branch...');\n  const branch = new command_runner_1.Command(`git checkout -b ${newVersion}`);\n  if (branch.error) {\n    terminal_log_1.terminal.error(branch.error);\n    process.exit(1);\n  }\n  terminal_log_1.terminal.label('cyan', 'CREATED');\n  // Update version\n  terminal_log_1.terminal.logInline('update', 'Updating version...');\n  const update = new command_runner_1.Command(`npm version ${newVersion}`);\n  if (update.error) {\n    terminal_log_1.terminal.error(update.error);\n    process.exit(1);\n  }\n  terminal_log_1.terminal.label('cyan', 'UPDATED');\n  // Save changes\n  await cli_1.Cli.save(opts);\n  // Print old and new version\n  terminal_log_1.terminal.log('version', `Project version patch created`);\n  terminal_log_1.terminal.log('version', `Old version: ${currentVersion}`);\n  terminal_log_1.terminal.log('version', `New version: ${newVersion}`);\n  terminal_log_1.terminal.log('version', `Run \\x1b[1mdt save\\x1b[0m to save changes`);\n  terminal_log_1.terminal.log('version', `Run \\x1b[1mdt deploy\\x1b[0m to publish changes`);\n};\nexports.Patch = Patch;\nconst int = str => {\n  return parseInt(str, 10);\n};\n\n//# sourceURL=webpack://@hahnd/dt/./src/modules/cli/new/patch.ts?");

/***/ }),

/***/ "./src/modules/cli/new/update.ts":
/*!***************************************!*\
  !*** ./src/modules/cli/new/update.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Update = void 0;\nconst cli_1 = __webpack_require__(/*! modules/cli */ \"./src/modules/cli.ts\");\nconst project_1 = __webpack_require__(/*! modules/project */ \"./src/modules/project.ts\");\nconst command_runner_1 = __webpack_require__(/*! utils/command-runner */ \"./src/utils/command-runner.ts\");\nconst terminal_log_1 = __webpack_require__(/*! utils/terminal-log */ \"./src/utils/terminal-log.ts\");\nconst Update = async opts => {\n  // Save changes\n  await cli_1.Cli.save(opts);\n  // Go to root directory\n  const rootDir = project_1.Project.rootDir();\n  process.chdir(rootDir);\n  // Get package.json\n  const packageJson = await project_1.Project.packageJson();\n  // Get current version\n  const currentVersion = packageJson.version;\n  // Predict new version\n  const version = packageJson.version;\n  let major = int(version[0]);\n  let minor = int(version[2]) + 1;\n  let patch = 0;\n  const newVersion = `${major}.${minor}.${patch}`;\n  // Create new branch\n  terminal_log_1.terminal.logInline('branch', 'Creating new version branch...');\n  const branch = new command_runner_1.Command(`git checkout -b ${newVersion}`);\n  if (branch.error) {\n    terminal_log_1.terminal.error(branch.error);\n    process.exit(1);\n  }\n  terminal_log_1.terminal.label('cyan', 'CREATED');\n  // Update version\n  terminal_log_1.terminal.logInline('update', 'Updating version...');\n  const update = new command_runner_1.Command(`npm version ${newVersion}`);\n  if (update.error) {\n    terminal_log_1.terminal.error(update.error);\n    process.exit(1);\n  }\n  terminal_log_1.terminal.label('cyan', 'UPDATED');\n  // Save changes\n  await cli_1.Cli.save(opts);\n  // Print old and new version\n  terminal_log_1.terminal.log('version', `Project version update created`);\n  terminal_log_1.terminal.log('version', `Old version: ${currentVersion}`);\n  terminal_log_1.terminal.log('version', `New version: ${newVersion}`);\n  terminal_log_1.terminal.log('version', `Run \\x1b[1mdt save\\x1b[0m to save changes`);\n  terminal_log_1.terminal.log('version', `Run \\x1b[1mdt deploy\\x1b[0m to publish changes`);\n};\nexports.Update = Update;\nconst int = str => {\n  return parseInt(str, 10);\n};\n\n//# sourceURL=webpack://@hahnd/dt/./src/modules/cli/new/update.ts?");

/***/ }),

/***/ "./src/modules/cli/new/upgrade.ts":
/*!****************************************!*\
  !*** ./src/modules/cli/new/upgrade.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Upgrade = void 0;\nconst cli_1 = __webpack_require__(/*! modules/cli */ \"./src/modules/cli.ts\");\nconst project_1 = __webpack_require__(/*! modules/project */ \"./src/modules/project.ts\");\nconst command_runner_1 = __webpack_require__(/*! utils/command-runner */ \"./src/utils/command-runner.ts\");\nconst terminal_log_1 = __webpack_require__(/*! utils/terminal-log */ \"./src/utils/terminal-log.ts\");\nconst Upgrade = async opts => {\n  // Save changes\n  await cli_1.Cli.save(opts);\n  // Go to root directory\n  const rootDir = project_1.Project.rootDir();\n  process.chdir(rootDir);\n  // Get package.json\n  const packageJson = await project_1.Project.packageJson();\n  // Get current version\n  const currentVersion = packageJson.version;\n  // Predict new version\n  const version = packageJson.version;\n  let major = int(version[0]) + 1;\n  let minor = 0;\n  let patch = 0;\n  const newVersion = `${major}.${minor}.${patch}`;\n  // Create new branch\n  terminal_log_1.terminal.logInline('branch', 'Creating new version branch...');\n  const branch = new command_runner_1.Command(`git checkout -b ${newVersion}`);\n  if (branch.error) {\n    terminal_log_1.terminal.error(branch.error);\n    process.exit(1);\n  }\n  terminal_log_1.terminal.label('cyan', 'CREATED');\n  // Upgrade version\n  terminal_log_1.terminal.logInline('update', 'Upgrading version...');\n  const update = new command_runner_1.Command(`npm version ${newVersion}`);\n  if (update.error) {\n    terminal_log_1.terminal.error(update.error);\n    process.exit(1);\n  }\n  terminal_log_1.terminal.label('cyan', 'UPDATED');\n  // Save changes\n  await cli_1.Cli.save(opts);\n  // Print old and new version\n  terminal_log_1.terminal.log('version', `Project version upgrade created`);\n  terminal_log_1.terminal.log('version', `Old version: ${currentVersion}`);\n  terminal_log_1.terminal.log('version', `New version: ${newVersion}`);\n  terminal_log_1.terminal.log('version', `Run \\x1b[1mdt save\\x1b[0m to save changes`);\n  terminal_log_1.terminal.log('version', `Run \\x1b[1mdt deploy\\x1b[0m to publish changes`);\n};\nexports.Upgrade = Upgrade;\nconst int = str => {\n  return parseInt(str, 10);\n};\n\n//# sourceURL=webpack://@hahnd/dt/./src/modules/cli/new/upgrade.ts?");

/***/ }),

/***/ "./src/modules/cli/save.ts":
/*!*********************************!*\
  !*** ./src/modules/cli/save.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Save = void 0;\nconst git_1 = __webpack_require__(/*! libs/git */ \"./src/libs/git.ts\");\nconst project_1 = __webpack_require__(/*! modules/project */ \"./src/modules/project.ts\");\nconst command_runner_1 = __webpack_require__(/*! utils/command-runner */ \"./src/utils/command-runner.ts\");\nconst terminal_log_1 = __webpack_require__(/*! utils/terminal-log */ \"./src/utils/terminal-log.ts\");\nconst Save = async opts => {\n  // Git requirements\n  await git_1.Git.requirements();\n  // Check if git is initialized\n  const gitIsInit = new command_runner_1.Command('git rev-parse --show-toplevel');\n  // If git is not initialized\n  if (gitIsInit.error) {\n    if (gitIsInit.error.includes('not a git repository')) {\n      terminal_log_1.terminal.error('Git is not initialized, run \\x1b[1mdt init\\x1b[0m command first');\n      process.exit(1);\n    }\n    terminal_log_1.terminal.error(gitIsInit.error);\n    process.exit(1);\n  }\n  // Branch guard\n  if (opts && !opts.force) {\n    await git_1.Git.branchGuard();\n  }\n  // Get git root directory\n  const rootDir = project_1.Project.rootDir();\n  // Check if package.json exists\n  await project_1.Project.requirements();\n  const packageJson = await project_1.Project.packageJson();\n  // Go to root directory\n  process.chdir(rootDir);\n  // Start saving\n  terminal_log_1.terminal.log('save', 'Saving changes...');\n  // Get status, if there are changes, get list of changed files\n  terminal_log_1.terminal.logInline('search', 'Searching for changes...');\n  const status = new command_runner_1.Command(`git status --porcelain`);\n  if (status.error) {\n    terminal_log_1.terminal.error(status.error);\n    process.exit(1);\n  }\n  if (status.result && status.result.length > 0) {\n    terminal_log_1.terminal.label('cyan', 'FOUND');\n    // Get list of changed files\n    const changedFiles = status.toString().trim().split('\\n');\n    // Print list of changed files\n    terminal_log_1.terminal.log('update', 'Changed files:');\n    changedFiles.forEach(file => {\n      terminal_log_1.terminal.log('file', file.trim());\n    });\n    // Add all files to git\n    terminal_log_1.terminal.logInline('stack', 'Stacking changed files to be commited...');\n    const add = new command_runner_1.Command(`git add .`);\n    if (add.error) {\n      terminal_log_1.terminal.label('red', 'error');\n      terminal_log_1.terminal.log('error', add.error);\n      process.exit(1);\n    }\n    terminal_log_1.terminal.label('green', 'DONE');\n    // Commit changes\n    terminal_log_1.terminal.logInline('password', 'Waiting for signature passphrase...');\n    const commit = new command_runner_1.Command(`git commit -S -m \"${packageJson.version}\"`);\n    if (commit.error) {\n      terminal_log_1.terminal.label('red', 'error');\n      terminal_log_1.terminal.error(commit.result);\n      process.exit(1);\n    }\n    terminal_log_1.terminal.label('cyan', 'SIGNED');\n    terminal_log_1.terminal.logInline('commit', 'Commiting changes...');\n    new command_runner_1.Command('sleep 1');\n    terminal_log_1.terminal.label('green', 'DONE');\n    // Check if has upstream\n    const hasUpstream = new command_runner_1.Command(`git rev-parse --abbrev-ref --symbolic-full-name @{u}`);\n    if (hasUpstream.error) {\n      // If there is no upstream, create one\n      terminal_log_1.terminal.logInline('push', 'Creating upstream...');\n      // Get branch name\n      const branchName = new command_runner_1.Command('git rev-parse --abbrev-ref HEAD').toString();\n      const createUpstream = new command_runner_1.Command(`git push --set-upstream origin ${branchName}`);\n      if (createUpstream.error) {\n        terminal_log_1.terminal.label('red', 'error');\n        terminal_log_1.terminal.log('error', createUpstream.error);\n        process.exit(1);\n      }\n      terminal_log_1.terminal.label('green', 'DONE');\n    } else {\n      // Push changes\n      terminal_log_1.terminal.logInline('push', 'Pushing changes...');\n      const push = new command_runner_1.Command(`git push`);\n      if (push.error) {\n        terminal_log_1.terminal.label('red', 'error');\n        terminal_log_1.terminal.log('error', push.error);\n        process.exit(1);\n      }\n      terminal_log_1.terminal.label('green', 'DONE');\n    }\n    // Push tags\n    terminal_log_1.terminal.logInline('push', 'Pushing tags...');\n    const pushTags = new command_runner_1.Command(`git push --tags`);\n    if (pushTags.error) {\n      terminal_log_1.terminal.log('error', pushTags.error);\n      process.exit(1);\n    }\n    terminal_log_1.terminal.label('green', 'DONE');\n    terminal_log_1.terminal.log('success', 'Changes saved!');\n  } else {\n    terminal_log_1.terminal.label('green', 'none');\n    terminal_log_1.terminal.success('All files are up to date');\n  }\n};\nexports.Save = Save;\n\n//# sourceURL=webpack://@hahnd/dt/./src/modules/cli/save.ts?");

/***/ }),

/***/ "./src/modules/cli/template.ts":
/*!*************************************!*\
  !*** ./src/modules/cli/template.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Template = void 0;\nconst install_1 = __webpack_require__(/*! modules/cli/template/install */ \"./src/modules/cli/template/install.ts\");\nconst list_1 = __webpack_require__(/*! modules/cli/template/list */ \"./src/modules/cli/template/list.ts\");\nclass Template {}\nTemplate.list = list_1.List;\nTemplate.install = install_1.Install;\nexports.Template = Template;\n\n//# sourceURL=webpack://@hahnd/dt/./src/modules/cli/template.ts?");

/***/ }),

/***/ "./src/modules/cli/template/install.ts":
/*!*********************************************!*\
  !*** ./src/modules/cli/template/install.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Install = void 0;\nconst git_1 = __webpack_require__(/*! libs/git */ \"./src/libs/git.ts\");\nconst project_1 = __webpack_require__(/*! modules/project */ \"./src/modules/project.ts\");\nconst template_installer_1 = __webpack_require__(/*! utils/template-installer */ \"./src/utils/template-installer.ts\");\nconst prompts = __webpack_require__(/*! prompts */ \"prompts\");\nconst Install = async () => {\n  // Git requirements\n  await git_1.Git.requirements();\n  await git_1.Git.branchGuard();\n  // Project requirements\n  await project_1.Project.requirements();\n  const install = new TemplateSelection();\n  install.chooseTemplate();\n};\nexports.Install = Install;\nclass TemplateSelection {\n  async chooseTemplate() {\n    const projectType = await prompts({\n      type: \"select\",\n      name: \"value\",\n      message: \"Project type\",\n      choices: [{\n        title: \"Browser\",\n        value: \"browser\"\n      }, {\n        title: \"API\",\n        value: \"api\"\n      }, {\n        title: \"CLI\",\n        value: \"cli\"\n      }, {\n        title: \"Gui\",\n        value: \"gui\"\n      }, {\n        title: \"Other\",\n        value: \"Other\"\n      }]\n    });\n    this.chooseLanguage(projectType.value);\n  }\n  async chooseLanguage(projectType) {\n    const project = async () => {\n      if (projectType === \"browser\") {\n        const language = await prompts({\n          type: \"select\",\n          name: \"value\",\n          message: \"Language\",\n          choices: [{\n            title: \"Javascript\",\n            value: \"javascript\"\n          }, {\n            title: \"Typescript\",\n            value: \"typescript\"\n          }]\n        });\n        return language.value;\n      }\n      if (projectType === \"api\" || projectType === \"cli\") {\n        const language = await prompts({\n          type: \"select\",\n          name: \"value\",\n          message: \"Language\",\n          choices: [{\n            title: \"Javascript\",\n            value: \"javascript\"\n          }, {\n            title: \"Typescript\",\n            value: \"typescript\"\n          }, {\n            title: \"Python\",\n            value: \"python\"\n          }, {\n            title: \"Go\",\n            value: \"go\"\n          }]\n        });\n        return language.value;\n      }\n      if (projectType === \"gui\") {\n        const language = await prompts({\n          type: \"select\",\n          name: \"value\",\n          message: \"Language\",\n          choices: [{\n            title: \"Python\",\n            value: \"python\"\n          }]\n        });\n        return language.value;\n      }\n    };\n    const language = await project();\n    this.chooseFramework(projectType, language);\n  }\n  async chooseFramework(projectType, language) {\n    if (projectType === \"browser\") {\n      if (language === \"javascript\") {\n        const framework = await prompts({\n          type: \"select\",\n          name: \"value\",\n          message: \"Framework\",\n          choices: [{\n            title: \"React\",\n            value: \"react\"\n          }, {\n            title: \"Next\",\n            value: \"next\"\n          }]\n        });\n        switch (framework.value) {\n          case \"react\":\n            const react = new template_installer_1.TemplateInstaller(\"react-javascript\");\n            react.install();\n            break;\n          case \"next\":\n            const next = new template_installer_1.TemplateInstaller(\"next-javascript\");\n            next.install();\n            break;\n        }\n      }\n      if (language === \"typescript\") {\n        const framework = await prompts({\n          type: \"select\",\n          name: \"value\",\n          message: \"Framework\",\n          choices: [{\n            title: \"React\",\n            value: \"react\"\n          }, {\n            title: \"Next\",\n            value: \"next\"\n          }]\n        });\n        switch (framework.value) {\n          case \"react\":\n            const react = new template_installer_1.TemplateInstaller(\"react-typescript\");\n            react.install();\n            break;\n          case \"next\":\n            const next = new template_installer_1.TemplateInstaller(\"next-typescript\");\n            next.install();\n            break;\n        }\n      }\n    }\n    if (projectType === \"api\") {\n      if (language === \"javascript\") {\n        const framework = await prompts({\n          type: \"select\",\n          name: \"value\",\n          message: \"Framework\",\n          choices: [{\n            title: \"Express\",\n            value: \"express\"\n          }]\n        });\n        switch (framework.value) {\n          case \"express\":\n            const express = new template_installer_1.TemplateInstaller(\"express-javascript\");\n            express.install();\n            break;\n        }\n      }\n      if (language === \"typescript\") {\n        const framework = await prompts({\n          type: \"select\",\n          name: \"value\",\n          message: \"Framework\",\n          choices: [{\n            title: \"Express\",\n            value: \"express\"\n          }]\n        });\n        switch (framework.value) {\n          case \"express\":\n            const express = new template_installer_1.TemplateInstaller(\"express-typescript\");\n            express.install();\n            break;\n        }\n      }\n      if (language === \"python\") {\n        const framework = await prompts({\n          type: \"select\",\n          name: \"value\",\n          message: \"Framework\",\n          choices: [{\n            title: \"Flask\",\n            value: \"flask\"\n          }, {\n            title: \"Django\",\n            value: \"django\"\n          }]\n        });\n        switch (framework.value) {\n          case \"flask\":\n            const flask = new template_installer_1.TemplateInstaller(\"flask-python\");\n            flask.install();\n            break;\n          case \"django\":\n            const django = new template_installer_1.TemplateInstaller(\"django-python\");\n            django.install();\n            break;\n        }\n      }\n      if (language === \"go\") {\n        const framework = await prompts({\n          type: \"select\",\n          name: \"value\",\n          message: \"Framework\",\n          choices: [{\n            title: \"Gin\",\n            value: \"gin\"\n          }]\n        });\n        switch (framework.value) {\n          case \"gin\":\n            const gin = new template_installer_1.TemplateInstaller(\"gin-go\");\n            gin.install();\n            break;\n        }\n      }\n    }\n    if (projectType === \"cli\") {\n      if (language === \"javascript\") {\n        const framework = await prompts({\n          type: \"select\",\n          name: \"value\",\n          message: \"Framework\",\n          choices: [{\n            title: \"Commander\",\n            value: \"commander-javascript\"\n          }]\n        });\n        switch (framework.value) {\n          case \"cli-javascript\":\n            const commander = new template_installer_1.TemplateInstaller(\"commander-javascript\");\n            commander.install();\n            break;\n        }\n      }\n      if (language === \"typescript\") {\n        const framework = await prompts({\n          type: \"select\",\n          name: \"value\",\n          message: \"Framework\",\n          choices: [{\n            title: \"Commander\",\n            value: \"commander-typescript\"\n          }]\n        });\n        switch (framework.value) {\n          case \"cli-typescript\":\n            const commander = new template_installer_1.TemplateInstaller(\"commander-typescript\");\n            commander.install();\n            break;\n        }\n      }\n      if (language === \"python\") {\n        const framework = await prompts({\n          type: \"select\",\n          name: \"value\",\n          message: \"Framework\",\n          choices: [{\n            title: \"Click\",\n            value: \"click\"\n          }]\n        });\n        switch (framework.value) {\n          case \"click\":\n            const click = new template_installer_1.TemplateInstaller(\"click-python\");\n            click.install();\n            break;\n        }\n      }\n    }\n    if (projectType === \"gui\") {\n      if (language === \"python\") {\n        const framework = await prompts({\n          type: \"select\",\n          name: \"value\",\n          message: \"Framework\",\n          choices: [{\n            title: \"Tkinter\",\n            value: \"tkinter\"\n          }]\n        });\n        switch (framework.value) {\n          case \"tkinter\":\n            const tkinter = new template_installer_1.TemplateInstaller(\"tkinter-python\");\n            tkinter.install();\n            break;\n        }\n      }\n    }\n  }\n}\n\n//# sourceURL=webpack://@hahnd/dt/./src/modules/cli/template/install.ts?");

/***/ }),

/***/ "./src/modules/cli/template/list.ts":
/*!******************************************!*\
  !*** ./src/modules/cli/template/list.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.List = void 0;\nconst terminal_log_1 = __webpack_require__(/*! utils/terminal-log */ \"./src/utils/terminal-log.ts\");\nconst List = async () => {\n  const templates = [{\n    icon: \"js\",\n    name: \"cli-javascript\",\n    description: \"Javascript cli template\"\n  }, {\n    icon: \"ts\",\n    name: \"cli-typescript\",\n    description: \"Typescript cli template\"\n  }, {\n    icon: \"py\",\n    name: \"cli-python\",\n    description: \"Python cli template\"\n  }, {\n    icon: \"go\",\n    name: \"cli-go\",\n    description: \"Go cli template\"\n  }, {\n    icon: \"js\",\n    name: \"api-javascript\",\n    description: \"Javascript api template\"\n  }, {\n    icon: \"ts\",\n    name: \"api-typescript\",\n    description: \"Typescript api template\"\n  }, {\n    icon: \"py\",\n    name: \"api-python\",\n    description: \"Python api template\"\n  }, {\n    icon: \"go\",\n    name: \"api-go\",\n    description: \"Go api template\"\n  }, {\n    icon: \"js\",\n    name: \"react-javascript\",\n    description: \"Javascript react template\"\n  }, {\n    icon: \"ts\",\n    name: \"react-typescript\",\n    description: \"Typescript react template\"\n  }];\n  terminal_log_1.terminal.log(\"list\", \"Available templates:\");\n  console.log(\" \");\n  console.log(\"     \" + \"Name\".padEnd(20) + \"Description\");\n  console.log(\"     \" + \"----\".padEnd(20) + \"-----------\");\n  templates.forEach(template => {\n    terminal_log_1.terminal.log(template.icon, \"  \" + template.name.padEnd(20) + template.description);\n  });\n};\nexports.List = List;\n\n//# sourceURL=webpack://@hahnd/dt/./src/modules/cli/template/list.ts?");

/***/ }),

/***/ "./src/modules/project.ts":
/*!********************************!*\
  !*** ./src/modules/project.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Project = void 0;\nconst defaultFiles_1 = __webpack_require__(/*! modules/project/defaultFiles */ \"./src/modules/project/defaultFiles.ts\");\nconst init_1 = __webpack_require__(/*! modules/project/init */ \"./src/modules/project/init.ts\");\nconst install_dependencies_1 = __webpack_require__(/*! modules/project/install-dependencies */ \"./src/modules/project/install-dependencies.ts\");\nconst install_requirements_1 = __webpack_require__(/*! modules/project/install-requirements */ \"./src/modules/project/install-requirements.ts\");\nconst packageJson_1 = __webpack_require__(/*! modules/project/packageJson */ \"./src/modules/project/packageJson.ts\");\nconst requirements_1 = __webpack_require__(/*! modules/project/requirements */ \"./src/modules/project/requirements.ts\");\nconst rootDir_1 = __webpack_require__(/*! modules/project/rootDir */ \"./src/modules/project/rootDir.ts\");\nclass Project {}\nProject.requirements = requirements_1.Requirements;\nProject.init = init_1.Init;\nProject.rootDir = rootDir_1.RootDir;\nProject.packageJson = packageJson_1.PackageJson;\nProject.savePackageJson = packageJson_1.SavePackageJson;\nProject.defaultFiles = defaultFiles_1.DefaultFiles;\nProject.installDependencies = install_dependencies_1.InstallDependencies;\nProject.installRequirements = install_requirements_1.InstallRequirements;\nexports.Project = Project;\n\n//# sourceURL=webpack://@hahnd/dt/./src/modules/project.ts?");

/***/ }),

/***/ "./src/modules/project/defaultFiles.ts":
/*!*********************************************!*\
  !*** ./src/modules/project/defaultFiles.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.DefaultFiles = void 0;\nconst fs = __importStar(__webpack_require__(/*! fs */ \"fs\"));\nconst project_1 = __webpack_require__(/*! modules/project */ \"./src/modules/project.ts\");\nconst terminal_log_1 = __webpack_require__(/*! utils/terminal-log */ \"./src/utils/terminal-log.ts\");\nconst DefaultFiles = async () => {\n  const packageJson = project_1.Project.packageJson();\n  const rootDir = project_1.Project.rootDir();\n  // Create README.md if it does not exist\n  if (!fs.existsSync(`${rootDir}/README.md`)) {\n    fs.writeFileSync(`${rootDir}/README.md`, `\n# ${packageJson.name}\n# ${packageJson.description}\n\n## Install\n\\`\\`\\`bash\nnpm install\n\\`\\`\\`\n\n## Test\n\\`\\`\\`bash\nnpm run test\n\\`\\`\\`\n\n## Watch (for development)\n\\`\\`\\`bash\nnpm run dev\n\n## Run (for development)\nnpm run start\n\\`\\`\\`\n\n## Build (for production)\n\\`\\`\\`bash\nnpm run build\n\\`\\`\\`\nAfter build, executable files will be in the \\`\\`dist\\`\\` folder.\n            `);\n  }\n  terminal_log_1.terminal.success(\"README.md created!\");\n};\nexports.DefaultFiles = DefaultFiles;\n\n//# sourceURL=webpack://@hahnd/dt/./src/modules/project/defaultFiles.ts?");

/***/ }),

/***/ "./src/modules/project/init.ts":
/*!*************************************!*\
  !*** ./src/modules/project/init.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Init = void 0;\nconst fs = __importStar(__webpack_require__(/*! fs */ \"fs\"));\nconst git_1 = __webpack_require__(/*! libs/git */ \"./src/libs/git.ts\");\nconst project_1 = __webpack_require__(/*! modules/project */ \"./src/modules/project.ts\");\nconst command_runner_1 = __webpack_require__(/*! utils/command-runner */ \"./src/utils/command-runner.ts\");\nconst terminal_log_1 = __webpack_require__(/*! utils/terminal-log */ \"./src/utils/terminal-log.ts\");\nconst prompts = __webpack_require__(/*! prompts */ \"prompts\");\nconst Init = async () => {\n  // Initialize git\n  git_1.Git.init();\n  // Check if has remote origin\n  const remote = new command_runner_1.Command(\"git remote get-url origin\");\n  if (remote.error) {\n    // Ask for remote origin\n    const remoteOrigin = await prompts({\n      type: \"text\",\n      name: \"answer\",\n      message: \"Enter the url of an empty repository:\"\n    });\n    // Set remote origin\n    const setRemote = new command_runner_1.Command(`git remote add origin ${remoteOrigin.answer}`);\n    if (setRemote.error) {\n      terminal_log_1.terminal.error(setRemote.error);\n      process.exit(1);\n    }\n  }\n  // Get git root directory\n  const rootDir = project_1.Project.rootDir();\n  // Init package.json\n  if (!fs.existsSync(`${rootDir}/package.json`)) {\n    const init = new command_runner_1.Command(\"npm init -y\");\n    if (init.error) {\n      terminal_log_1.terminal.error(init.error);\n      process.exit(1);\n    }\n    // Reset version to 0.0.0 (use sed)\n    const resetVersion = new command_runner_1.Command('sed -i \\'s/\"version\": \"1.0.0\"/\"version\": \"0.0.0\"/g\\' ' + `${rootDir}/package.json`);\n    if (resetVersion.error) {\n      terminal_log_1.terminal.error(resetVersion.error);\n      process.exit(1);\n    }\n  }\n  await project_1.Project.defaultFiles();\n};\nexports.Init = Init;\n\n//# sourceURL=webpack://@hahnd/dt/./src/modules/project/init.ts?");

/***/ }),

/***/ "./src/modules/project/install-dependencies.ts":
/*!*****************************************************!*\
  !*** ./src/modules/project/install-dependencies.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.InstallDependencies = void 0;\nconst command_runner_1 = __webpack_require__(/*! utils/command-runner */ \"./src/utils/command-runner.ts\");\nconst terminal_log_1 = __webpack_require__(/*! utils/terminal-log */ \"./src/utils/terminal-log.ts\");\nconst InstallDependencies = async opts => {\n  // Start\n  terminal_log_1.terminal.log('package', 'Installing dependencies...');\n  // Install dependencies\n  const install = new command_runner_1.Command('npm install');\n  if (install.error) {\n    terminal_log_1.terminal.error('Error installing dependencies');\n    process.exit(1);\n  }\n  // Finish\n  terminal_log_1.terminal.success('Dependencies installed!');\n};\nexports.InstallDependencies = InstallDependencies;\n\n//# sourceURL=webpack://@hahnd/dt/./src/modules/project/install-dependencies.ts?");

/***/ }),

/***/ "./src/modules/project/install-requirements.ts":
/*!*****************************************************!*\
  !*** ./src/modules/project/install-requirements.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.InstallRequirements = void 0;\nconst command_runner_1 = __webpack_require__(/*! utils/command-runner */ \"./src/utils/command-runner.ts\");\nconst terminal_log_1 = __webpack_require__(/*! utils/terminal-log */ \"./src/utils/terminal-log.ts\");\nconst InstallRequirements = async opts => {\n  // Start\n  terminal_log_1.terminal.log('package', 'Installing requirements...');\n  // Install requirements\n  const cpx = new command_runner_1.Command('npm install -g cpx');\n  if (cpx.error) {\n    terminal_log_1.terminal.error(cpx.error);\n  }\n  const wget = new command_runner_1.Command('npm install -g wget');\n  if (wget.error) {\n    terminal_log_1.terminal.error(wget.error);\n  }\n  const curl = new command_runner_1.Command('npm install -g curl');\n  if (curl.error) {\n    terminal_log_1.terminal.error(curl.error);\n  }\n  const prettier = new command_runner_1.Command('npm install -g prettier');\n  if (prettier.error) {\n    terminal_log_1.terminal.error(prettier.error);\n  }\n  const eslint = new command_runner_1.Command('npm install -g eslint');\n  if (eslint.error) {\n    terminal_log_1.terminal.error(eslint.error);\n  }\n  const zip = new command_runner_1.Command('npm install -g zip');\n  if (zip.error) {\n    terminal_log_1.terminal.error(zip.error);\n  }\n  // Finish\n  terminal_log_1.terminal.success('Requirements installed!');\n};\nexports.InstallRequirements = InstallRequirements;\n\n//# sourceURL=webpack://@hahnd/dt/./src/modules/project/install-requirements.ts?");

/***/ }),

/***/ "./src/modules/project/packageJson.ts":
/*!********************************************!*\
  !*** ./src/modules/project/packageJson.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.SavePackageJson = exports.PackageJson = void 0;\nconst fs = __importStar(__webpack_require__(/*! fs */ \"fs\"));\nconst project_1 = __webpack_require__(/*! modules/project */ \"./src/modules/project.ts\");\nconst PackageJson = () => {\n  // Get git root directory\n  const rootDir = project_1.Project.rootDir();\n  // Get package.json\n  const packageJson = JSON.parse(fs.readFileSync(`${rootDir}/package.json`).toString());\n  return packageJson;\n};\nexports.PackageJson = PackageJson;\nconst SavePackageJson = async packageJson => {\n  // Get git root directory\n  const rootDir = project_1.Project.rootDir();\n  // Save package.json\n  fs.writeFileSync(`${rootDir}/package.json`, JSON.stringify(packageJson, null, 2));\n};\nexports.SavePackageJson = SavePackageJson;\n\n//# sourceURL=webpack://@hahnd/dt/./src/modules/project/packageJson.ts?");

/***/ }),

/***/ "./src/modules/project/requirements.ts":
/*!*********************************************!*\
  !*** ./src/modules/project/requirements.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Requirements = void 0;\nconst fs = __importStar(__webpack_require__(/*! fs */ \"fs\"));\nconst command_runner_1 = __webpack_require__(/*! utils/command-runner */ \"./src/utils/command-runner.ts\");\nconst terminal_log_1 = __webpack_require__(/*! utils/terminal-log */ \"./src/utils/terminal-log.ts\");\nconst Requirements = async () => {\n  // Get git root directory\n  const rootDir = new command_runner_1.Command('git rev-parse --show-toplevel').toString();\n  // Check if package.json exists\n  if (!fs.existsSync(`${rootDir}/package.json`)) {\n    terminal_log_1.terminal.error('package.json not found, run \\x1b[1mdt init\\x1b[0m command first');\n    process.exit(1);\n  }\n};\nexports.Requirements = Requirements;\n\n//# sourceURL=webpack://@hahnd/dt/./src/modules/project/requirements.ts?");

/***/ }),

/***/ "./src/modules/project/rootDir.ts":
/*!****************************************!*\
  !*** ./src/modules/project/rootDir.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.RootDir = void 0;\nconst command_runner_1 = __webpack_require__(/*! utils/command-runner */ \"./src/utils/command-runner.ts\");\nconst terminal_log_1 = __webpack_require__(/*! utils/terminal-log */ \"./src/utils/terminal-log.ts\");\nconst RootDir = () => {\n  // Get git root directory\n  const rootDir = new command_runner_1.Command(\"git rev-parse --show-toplevel\");\n  if (rootDir.error) {\n    terminal_log_1.terminal.error(rootDir.error);\n    process.exit(1);\n  }\n  return rootDir.toString();\n};\nexports.RootDir = RootDir;\n\n//# sourceURL=webpack://@hahnd/dt/./src/modules/project/rootDir.ts?");

/***/ }),

/***/ "./src/utils/check-update.ts":
/*!***********************************!*\
  !*** ./src/utils/check-update.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.checkUpdate = void 0;\nconst fs_1 = __importDefault(__webpack_require__(/*! fs */ \"fs\"));\nconst https_1 = __importDefault(__webpack_require__(/*! https */ \"https\"));\nconst terminal_log_1 = __webpack_require__(/*! utils/terminal-log */ \"./src/utils/terminal-log.ts\");\n// Check for updates\nconst checkUpdate = async () => {\n  const version = JSON.parse(fs_1.default.readFileSync('./package.json', 'utf8')).version;\n  const latestVersion = await getLatestVersion();\n  if (version.toString().localeCompare(latestVersion, undefined, {\n    numeric: true\n  }) === -1) {\n    terminal_log_1.terminal.log('new', `Update available: \\x1b[36m\\x1b[1m${version}\\x1b[0m -> \\x1b[5m\\x1b[33m\\x1b[1m${latestVersion}\\x1b[0m`);\n  }\n};\nexports.checkUpdate = checkUpdate;\nasync function getLatestVersion() {\n  const packageJsonUrl = 'https://raw.githubusercontent.com/hermannhahn/dt/main/package.json';\n  return new Promise((resolve, reject) => {\n    https_1.default.get(packageJsonUrl, res => {\n      let data = '';\n      res.on('data', chunk => {\n        data += chunk;\n      });\n      res.on('end', () => {\n        try {\n          const packageJson = JSON.parse(data);\n          resolve(packageJson.version);\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }).on('error', error => {\n      reject(error);\n    });\n  });\n}\n\n//# sourceURL=webpack://@hahnd/dt/./src/utils/check-update.ts?");

/***/ }),

/***/ "./src/utils/command-runner.ts":
/*!*************************************!*\
  !*** ./src/utils/command-runner.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Command = void 0;\nconst child_process_1 = __webpack_require__(/*! child_process */ \"child_process\");\nclass Command {\n  constructor(command, options) {\n    this.error = false;\n    this.result = '';\n    try {\n      if (options) {\n        if (options.silent) {\n          const result = (0, child_process_1.execSync)(command, {\n            stdio: 'inherit'\n          });\n          this.result = result;\n        }\n      } else {\n        // Run command\n        const result = (0, child_process_1.execSync)(command, {\n          stdio: 'pipe'\n        });\n        this.result = result;\n      }\n    } catch (error) {\n      this.error = error.message;\n    }\n  }\n  toString() {\n    return this.result.toString().trim();\n  }\n}\nexports.Command = Command;\n\n//# sourceURL=webpack://@hahnd/dt/./src/utils/command-runner.ts?");

/***/ }),

/***/ "./src/utils/icon-text.ts":
/*!********************************!*\
  !*** ./src/utils/icon-text.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Icons = void 0;\nconst icons = {\n  success: '✔',\n  done: '✅',\n  doneerror: '⛏️',\n  tick: '🗸',\n  unchecked: '☐',\n  checked: '☑',\n  error: '❌',\n  ok: '🆗',\n  free: '🆓',\n  new: '🆕',\n  film: '🎞️',\n  mic: '🎙️',\n  volumeup: '🔊',\n  volumedown: '🔈',\n  mixer: '🎚️',\n  dice: '🎲',\n  label: '🏷️',\n  break: '🛑',\n  breakheart: '💔',\n  lamp: '💡',\n  zzz: '💤',\n  fail: '❌',\n  stop: '⛔',\n  folder: '📁',\n  pin: '📌',\n  clip: '📎',\n  rule: '📏',\n  lib: '📕' || 0 || 0 || 0,\n  antena: '📡',\n  email: '📧',\n  letterbox: '📫',\n  emptyletterbox: '📭',\n  libs: '📚',\n  dollar: '💲',\n  smartphone: '📱',\n  signal: '📶',\n  tape: '📼',\n  refresh: '🔄',\n  joystick: '🕹️',\n  mouse: '🖱️',\n  list: '📋',\n  add: '➕',\n  keyboard: '⌨️',\n  speechballoon: '💬',\n  update: '🔄',\n  trash: '🗑️',\n  map: '🗺️',\n  earth: '🌍',\n  archive: '🗃️',\n  index: '🗂️',\n  bookmark: '🔖',\n  underconstruction: '🚧',\n  siren: '🚨',\n  flag: '🚩',\n  nosmoke: '🚭',\n  shield: '🛡️',\n  tool: '🛠️',\n  laptop: '💻',\n  minidisk: '💽',\n  cdrom: '💿',\n  bug: '🐞',\n  warn: '⚠️',\n  info: ' ℹ️',\n  heart: '❤️',\n  pen: '✒️',\n  library: '📚',\n  push: '📤',\n  pull: '📥',\n  commit: '📝',\n  staging: '📦',\n  stack: '📚',\n  branch: '🌱',\n  merge: '🔀',\n  package: '📦',\n  file: '📄',\n  save: '💾',\n  search: '🔎',\n  sign: '✍',\n  password: '🔑',\n  question: '❓',\n  work: '🔨',\n  star: '⭐',\n  item: '📌',\n  gear: '⚙️',\n  energy: '⚡',\n  clock: '⏰',\n  time: '⏱',\n  debug: '🐛',\n  terminal: '🖥',\n  cloud: '☁',\n  rain: '🌧',\n  lightning: '🌪',\n  cloudsun: '🌤',\n  shootingstar: '🌠',\n  starshining: '🌟',\n  sun: '🌞',\n  moon: '🌒',\n  play: '▶',\n  playpause: '⏯',\n  user: '👤',\n  party: '🎉',\n  target: '🎯',\n  launch: '🚀',\n  mosquito: '🦟',\n  blood: '🩸',\n  bomb: '💣',\n  watch: '⌚',\n  store: '🏪',\n  timer: '⌛',\n  phone: '☎',\n  phonecall: '📞',\n  phonehangup: '📴',\n  phoneincoming: '📲',\n  phoneoutgoing: '📳',\n  phonevoicemail: '📩',\n  phonevibrate: '📳',\n  phonealert: '📵',\n  phonebattery: '🔋',\n  powerplug: '🔌',\n  arrowLeft: '⬅️',\n  arrowRight: '➡️',\n  arrowUp: '⬆️',\n  arrowDown: '⬇️',\n  fingerUp: '👆',\n  fingerDown: '👇',\n  fingerLeft: '👈',\n  fingerRight: '👉',\n  dot: '⚪',\n  dotBlack: '⚫',\n  dotRed: '🔴',\n  dotGreen: '🟢',\n  dotBlue: '🔵',\n  dotYellow: '🟡',\n  dotPurple: '🟣',\n  dotOrange: '🟠',\n  dotBrown: '🟤',\n  git: '🐙',\n  lock: '🔒',\n  unlock: '🔓',\n  crypt: '🔐',\n  decrypt: '🔏'\n};\nclass Icons {\n  constructor(iconName) {\n    this.icon = icons[iconName];\n    // If icon is not found, return iconLabel\n    if (!this.icon) {\n      this.icon = this.iconLabel(iconName);\n    }\n  }\n  toString() {\n    return this.icon;\n  }\n  iconLabel(text) {\n    // Get first four letters of text\n    text = text.toString().slice(0, 4).toLowerCase();\n    // Colors:\n    // blue background: \\x1b[44m\\x1b[37m\n    // white background: \\x1b[47m\\x1b[30m\n    // yellow background: \\x1b[43m\\x1b[30m\n    // black background: \\x1b[40m\\x1b[37m\n    // red background: \\x1b[41m\\x1b[37m\n    // green background: \\x1b[42m\\x1b[37m\n    // cyan background: \\x1b[46m\\x1b[30m\n    // magenta background: \\x1b[45m\\x1b[37m\n    // white color: \\x1b[37m\n    // black color: \\x1b[30m\n    // reset: \\x1b[0m\n    switch (text) {\n      case 'js':\n        return '\\x1b[44m\\x1b[37m' + 'JS' + '\\x1b[0m';\n      case 'ts':\n        return '\\x1b[44m\\x1b[37m' + 'TS' + '\\x1b[0m';\n      case 'html':\n        return '\\x1b[47m\\x1b[37m' + 'HTML' + '\\x1b[0m';\n      case 'css':\n        return '\\x1b[46m\\x1b[37m' + 'CSS' + '\\x1b[0m';\n      default:\n        return '\\x1b[47m\\x1b[30m' + text.toUpperCase() + '\\x1b[0m';\n    }\n  }\n}\nexports.Icons = Icons;\n\n//# sourceURL=webpack://@hahnd/dt/./src/utils/icon-text.ts?");

/***/ }),

/***/ "./src/utils/template-installer.ts":
/*!*****************************************!*\
  !*** ./src/utils/template-installer.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.TemplateInstaller = void 0;\nconst fs = __importStar(__webpack_require__(/*! fs */ \"fs\"));\nconst command_runner_1 = __webpack_require__(/*! utils/command-runner */ \"./src/utils/command-runner.ts\");\nconst commander_typescript_1 = __webpack_require__(/*! utils/templates/commander-typescript */ \"./src/utils/templates/commander-typescript.ts\");\nconst express_typescript_1 = __webpack_require__(/*! utils/templates/express-typescript */ \"./src/utils/templates/express-typescript.ts\");\nconst next_typescript_1 = __webpack_require__(/*! utils/templates/next-typescript */ \"./src/utils/templates/next-typescript.ts\");\nconst react_typescript_1 = __webpack_require__(/*! utils/templates/react-typescript */ \"./src/utils/templates/react-typescript.ts\");\nconst tkinter_python_1 = __webpack_require__(/*! utils/templates/tkinter-python */ \"./src/utils/templates/tkinter-python.ts\");\nclass TemplateInstaller {\n  constructor(name) {\n    this.name = name;\n    switch (name) {\n      case \"commander-typescript\":\n        this.template = new commander_typescript_1.CommanderTypescript();\n        break;\n      case \"react-typescript\":\n        this.template = new react_typescript_1.ReactTypescript();\n        break;\n      case \"next-typescript\":\n        this.template = new next_typescript_1.NextTypescript();\n        break;\n      case \"express-typescript\":\n        this.template = new express_typescript_1.ExpressTypescript();\n        break;\n      case \"tkinter-python\":\n        this.template = new tkinter_python_1.TkinterPython();\n        break;\n    }\n  }\n  async install() {\n    this.createProjectFolders();\n    this.createProjectFiles();\n    this.installDependencies();\n  }\n  createProjectFolders() {\n    this.template.folders.forEach(folder => {\n      fs.mkdirSync(folder);\n    });\n  }\n  createProjectFiles() {\n    this.template.files.forEach(file => {\n      fs.writeFileSync(file.path, file.content);\n    });\n  }\n  installDependencies() {\n    if (this.name === \"tkinter-python\") this.installPythonDependencies();else this.installDevDependencies();\n    this.installProjectDependencies();\n    this.installGlobalDependencies();\n  }\n  installPythonDependencies() {\n    for (const dependency of this.template.dependencies) new command_runner_1.Command(`pip install ${this.template.dependencies.toString()}`);\n  }\n  installDevDependencies() {\n    for (const dependency of this.template.devDependencies) new command_runner_1.Command(`npm i -D ${this.template.devDependencies.toString()}`);\n  }\n  installProjectDependencies() {\n    for (const dependency of this.template.dependencies) new command_runner_1.Command(`npm i ${this.template.dependencies.toString()}`);\n  }\n  installGlobalDependencies() {\n    for (const dependency of this.template.globalDependencies) new command_runner_1.Command(`npm i -g ${this.template.globalDependencies.toString()}`);\n  }\n  // Add script to package.json\n  addScript() {\n    const scripts = this.template.scripts;\n    const packageJson = JSON.parse(fs.readFileSync(\"package.json\").toString());\n    packageJson.scripts = {\n      ...packageJson.scripts,\n      ...scripts\n    };\n    fs.writeFileSync(\"package.json\", JSON.stringify(packageJson, null, 2));\n  }\n}\nexports.TemplateInstaller = TemplateInstaller;\n\n//# sourceURL=webpack://@hahnd/dt/./src/utils/template-installer.ts?");

/***/ }),

/***/ "./src/utils/templates/commander-typescript.ts":
/*!*****************************************************!*\
  !*** ./src/utils/templates/commander-typescript.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\n// Description: Eslint Typescript template\n// Addons: typescript, prettier, eslint, babel, webpack, and jest\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.CommanderTypescript = void 0;\nclass CommanderTypescript {\n  constructor() {\n    this.name = \"commander-typescript\";\n    this.folders = [\"src\", \"compile\", \"build\", \"dist\"];\n    this.files = [{\n      path: \"tsconfig.json\",\n      content: `\n{\n    \"compilerOptions\": {\n        \"target\": \"es2018\",\n        \"module\": \"commonjs\",\n        \"baseUrl\": \".\",\n        \"outDir\": \"compile\",\n        \"rootDir\": \"src\",\n        \"strict\": true,\n        \"forceConsistentCasingInFileNames\": true,\n        \"esModuleInterop\": true,\n        \"sourceMap\": true,\n        \"typeRoots\": [\"node_modules/@types\"],\n        \"types\": [\"node\"],\n        \"paths\": {\n            \"*\": [\"src/*\"]\n        }\n    },\n    \"include\": [\"src/**/*\"],\n    \"exclude\": [\n        \"node_modules\",\n        \"**/*.spec.ts\",\n        \"**/*.test.ts\",\n        \"dist\",\n        \"compile\",\n        \"build\"\n    ]\n}\n            `\n    }, {\n      path: \"src/index.ts\",\n      content: `console.log('Hello world!')`\n    }, {\n      path: \".prettierrc\",\n      content: `\n{\n    \"printWidth\": 80,\n    \"tabWidth\": 4,\n    \"useTabs\": false,\n    \"semi\": true,\n    \"singleQuote\": true,\n    \"trailingComma\": \"es5\",\n    \"bracketSpacing\": true,\n    \"arrowParens\": \"avoid\",\n    \"endOfLine\": \"lf\"\n}\n            `\n    }, {\n      path: \".eslintrc.js\",\n      content: `\nmodule.exports = {\n    root: true,\n    env: {\n        es6: true,\n        node: true,\n        commonjs: true,\n    },\n    parser: \"@babel/eslint-parser\",\n    parserOptions: {\n        ecmaVersion: 2018,\n        sourceType: \"module\",\n    },\n    plugins: [\"import\"],\n    extends: [\n        \"eslint:recommended\",\n        \"plugin:import/errors\",\n        \"plugin:import/warnings\",\n        \"plugin:import/typescript\",\n        \"prettier\",\n    ],\n    rules: {\n        \"import/no-unresolved\": \"error\",\n        \"import/named\": \"error\",\n        \"import/default\": \"error\",\n        \"import/namespace\": \"error\",\n        \"import/no-named-as-default\": \"error\",\n        \"import/no-named-as-default-member\": \"error\",\n        \"import/no-extraneous-dependencies\": [\n            \"error\",\n            { devDependencies: [\"**/*.test.js\", \"**/*.spec.js\"] },\n        ],\n        \"no-unused-vars\": [\"error\", { argsIgnorePattern: \"^_\" }],\n        semi: [\"error\", \"never\"],\n        \"comma-dangle\": [\"error\", \"always-multiline\"],\n        quotes: [\"error\", \"single\"],\n    },\n}\n            `\n    }, {\n      path: \".babelrc\",\n      content: `\n{\n    \"presets\": [\n        \"@babel/preset-env\",\n        \"@babel/preset-typescript\"\n    ]\n}\n            `\n    }, {\n      path: \"webpack.config.js\",\n      content: `\nconst path = require('path')\nmodule.exports = {\n    entry: {\n        app: \"./src/index.ts\",\n    },\n    target: \"node\",\n    mode: \"production\",\n    output: {\n        path: path.resolve(__dirname, \"build\"),\n        filename: \"[name].js\",\n        libraryTarget: \"commonjs2\",\n    },\n    resolve: {\n        extensions: [\".ts\", \".js\"],\n        modules: [path.resolve(__dirname, \"src\"), \"node_modules\"],\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.ts$/,\n                use: [\n                    {\n                        loader: \"babel-loader\",\n                        options: {\n                            presets: [[\"@babel/preset-env\", { targets: \"defaults\" }]],\n                        },\n                    },\n                    \"ts-loader\",\n                ],\n                exclude: [/node_modules/],\n            },\n        ],\n    },\n    // adicionando a configuração para ignorar os módulos do node_modules\n    externals: [\n        nodeExternals(),\n        {\n            \"./\": \"./\",\n            \"**\": \"./src/**/*\",\n        },\n    ],\n    plugins: [\n        {\n            apply: (compiler) => {\n                compiler.hooks.afterEmit.tap(\"AfterEmitPlugin\", (compilation) => {\n                    execSync(\"npm run compile\")\n                })\n            },\n        },\n    ],\n}\n            `\n    }, {\n      path: \"jest.config.js\",\n      content: `\nmodule.exports = {\n    roots: [\"./src\"],\n    testEnvironment: 'node',\n    transform: {\n        \"^.+\\\\.tsx?$\": \"ts-jest\",\n    },\n    testRegex: \"(/__tests__/.*|(\\\\.|/)(test|spec))\\\\.tsx?$\",\n    moduleFileExtensions: [\"ts\", \"tsx\", \"js\", \"jsx\", \"json\", \"node\"],\n}\n            `\n    }, {\n      path: \"test/index.test.ts\",\n      content: `\nimport { sum } from '../src/index'\n\ndescribe('sum', () => {\n    it('should sum two numbers', () => {\n        expect(sum(1, 2)).toBe(3)\n    })\n})\n            `\n    }];\n    this.scripts = [{\n      name: \"eslint\",\n      command: \"echo 'Linting...' && eslint src/**/*.ts --fix --ext .ts,.js,.json --ignore-path .gitignore && echo 'Linted!'\"\n    }, {\n      name: \"eslint:check\",\n      command: \"echo 'Linting...' && eslint src/**/*.ts --ext .ts,.js,.json --ignore-path .gitignore && echo 'Linted!'\"\n    }, {\n      name: \"lint-staged\",\n      command: \"echo 'Linting...' && lint-staged && echo 'Linted!'\"\n    }, {\n      name: \"prettier\",\n      command: \"echo 'Formatting...' && prettier --write \\\"src/**/*.ts\\\" && echo 'Formatted!'\"\n    }, {\n      name: \"prettier:check\",\n      command: \"echo 'Formatting...' && prettier --check \\\"src/**/*.ts\\\" && echo 'Format Checked!'\"\n    }, {\n      name: \"dev\",\n      command: 'nodemon --watch src --exec \"webpack --mode development --watch\" --ext *.ts,*.js,*.json'\n    }, {\n      name: \"build\",\n      command: \"title Building... && webpack --mode production && title Built!\"\n    }, {\n      name: \"compile\",\n      command: \"title Compiling... && pkg build/index.js --target node18-win-x64,node18-macos-x64,node18-linux-x64 --out-dir ./dist && title Compiled!\"\n    }, {\n      name: \"start\",\n      command: \"node build/index.js\"\n    }];\n    this.devDependencies = [\"typescript\", \"@babel/core\", \"@babel/eslint-parser\", \"@babel/preset-env\", \"@babel/preset-typescript\", \"@types/node\", \"@types/jest\", \"@types/prompts\", \"@types/dotenv\", \"eslint-plugin-import\", \"eslint-plugin-prettier\", \"eslint-config-prettier\", \"prettier-eslint\", \"prettier-eslint-cli\", \"prettier-eslint-config\", \"prettier-eslint-config-prettier\", \"babel\", \"eslint\", \"prettier\", \"ts-loader\", \"node-externals\", \"webpack\", \"webpack-cli\", \"webpack-node-externals\", \"jest\", \"ts-node\", \"ts-jest\"];\n    this.dependencies = [\"commander\", \"@commander-js/extra-typings\", \"dotenv\", \"prompts\"];\n    this.globalDependencies = [\"nodemon\", \"pkg\", \"ts-node\", \"lint-staged\", \"typescript\", \"eslint\", \"prettier\", \"jest\", \"webpack-cli\"];\n  }\n}\nexports.CommanderTypescript = CommanderTypescript;\n\n//# sourceURL=webpack://@hahnd/dt/./src/utils/templates/commander-typescript.ts?");

/***/ }),

/***/ "./src/utils/templates/express-typescript.ts":
/*!***************************************************!*\
  !*** ./src/utils/templates/express-typescript.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\n// Description: Express.js TypeScript template\n// Addons: typescript, prettier, eslint, babel, webpack, and jest\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ExpressTypescript = void 0;\nclass ExpressTypescript {\n  constructor() {\n    this.name = \"express-typescript\";\n    this.folders = [\"src\", \"compile\", \"build\", \"dist\"];\n    this.files = [{\n      path: \"tsconfig.json\",\n      content: `\n{\n    \"compilerOptions\": {\n        \"target\": \"es2018\",\n        \"module\": \"commonjs\",\n        \"baseUrl\": \".\",\n        \"outDir\": \"compile\",\n        \"rootDir\": \"src\",\n        \"strict\": true,\n        \"forceConsistentCasingInFileNames\": true,\n        \"esModuleInterop\": true,\n        \"sourceMap\": true,\n        \"typeRoots\": [\"node_modules/@types\"],\n        \"types\": [\"node\"],\n        \"paths\": {\n            \"*\": [\"src/*\"]\n        }\n    },\n    \"include\": [\"src/**/*\"],\n    \"exclude\": [\n        \"node_modules\",\n        \"**/*.spec.ts\",\n        \"**/*.test.ts\",\n        \"dist\",\n        \"compile\",\n        \"build\"\n    ]\n}\n            `\n    }, {\n      path: \"src/index.ts\",\n      content: `console.log('Hello world!')`\n    }, {\n      path: \".prettierrc\",\n      content: `\n{\n    \"printWidth\": 80,\n    \"tabWidth\": 4,\n    \"useTabs\": false,\n    \"semi\": true,\n    \"singleQuote\": true,\n    \"trailingComma\": \"es5\",\n    \"bracketSpacing\": true,\n    \"arrowParens\": \"avoid\",\n    \"endOfLine\": \"lf\"\n}\n            `\n    }, {\n      path: \".eslintrc.js\",\n      content: `\nmodule.exports = {\n    root: true,\n    env: {\n        es6: true,\n        node: true,\n        commonjs: true,\n    },\n    parser: \"@babel/eslint-parser\",\n    parserOptions: {\n        ecmaVersion: 2018,\n        sourceType: \"module\",\n    },\n    plugins: [\"import\"],\n    extends: [\n        \"eslint:recommended\",\n        \"plugin:import/errors\",\n        \"plugin:import/warnings\",\n        \"plugin:import/typescript\",\n        \"prettier\",\n    ],\n    rules: {\n        \"import/no-unresolved\": \"error\",\n        \"import/named\": \"error\",\n        \"import/default\": \"error\",\n        \"import/namespace\": \"error\",\n        \"import/no-named-as-default\": \"error\",\n        \"import/no-named-as-default-member\": \"error\",\n        \"import/no-extraneous-dependencies\": [\n            \"error\",\n            { devDependencies: [\"**/*.test.js\", \"**/*.spec.js\"] },\n        ],\n        \"no-unused-vars\": [\"error\", { argsIgnorePattern: \"^_\" }],\n        semi: [\"error\", \"never\"],\n        \"comma-dangle\": [\"error\", \"always-multiline\"],\n        quotes: [\"error\", \"single\"],\n    },\n}\n            `\n    }, {\n      path: \".babelrc\",\n      content: `\n{\n    \"presets\": [\n        \"@babel/preset-env\",\n        \"@babel/preset-typescript\"\n    ]\n}\n            `\n    }, {\n      path: \"webpack.config.js\",\n      content: `\nconst path = require(\"path\")\nconst webpack = require(\"webpack\")\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\")\nconst { CleanWebpackPlugin } = require(\"clean-webpack-plugin\")\nconst CopyWebpackPlugin = require(\"copy-webpack-plugin\")\n\nmodule.exports = {\n    entry: \"./src/index.tsx\",\n    output: {\n        path: path.resolve(__dirname, \"build\"),\n        filename: \"bundle.js\",\n    },\n    resolve: {\n        extensions: [\".ts\", \".tsx\", \".js\", \".json\"],\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.tsx?$/,\n                loader: \"babel-loader\",\n            },\n            {\n                test: /\\.css$/,\n                use: [\"style-loader\", \"css-loader\"],\n            },\n            {\n                test: /\\.(png|svg|jpg|gif)$/,\n                use: [\"file-loader\"],\n            },\n        ],\n    },\n    plugins: [\n        new CleanWebpackPlugin(),\n        new HtmlWebpackPlugin({\n            template: \"./src/public/index.html\",\n        }),\n        new CopyWebpackPlugin({\n            patterns: [\n                {\n                    from: \"src/assets\",\n                    to: \"assets\",\n                },\n            ],\n        }),\n    ],\n}\n            `\n    }, {\n      path: \"jest.config.js\",\n      content: `\nmodule.exports = {\n    preset: \"ts-jest\",\n    testEnvironment: \"node\",\n}\n            `\n    }, {\n      path: \"src/public/index.html\",\n      content: `\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <title>React App</title>\n    </head>\n    <body>\n        <div id=\"root\"></div>\n    </body>\n</html>\n            `\n    }, {\n      path: \"src/index.tsx\",\n      content: `\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nconst App = () => {\n    return <div>Hello world!</div>\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n            `\n    }, {\n      path: \"src/App.tsx\",\n      content: `\nimport React from \"react\"\n\nconst App = () => {\n    return <div>Hello world!</div>\n}\n\nexport default App\n\n            `\n    }, {\n      path: \"src/App.test.tsx\",\n      content: `\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\n\nit(\"renders without crashing\", () => {\n    const div = document.createElement(\"div\")\n    ReactDOM.render(<App />, div)\n    ReactDOM.unmountComponentAtNode(div)\n})\n            `\n    }, {\n      path: \"src/index.test.tsx\",\n      content: `\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\n\nit(\"renders without crashing\", () => {\n    const div = document.createElement(\"div\")\n    ReactDOM.render(<App />, div)\n    ReactDOM.unmountComponentAtNode(div)\n})\n            `\n    }, {\n      path: \"src/components/Hello.tsx\",\n      content: `\nimport React from \"react\"\n\ninterface Props {\n    name: string\n}\n\nconst Hello = (props: Props) => {\n    return <div>Hello {props.name}</div>\n}\n\nexport default Hello\n            `\n    }, {\n      path: \"src/components/Hello.test.tsx\",\n      content: `\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Hello from \"./Hello\"\n\nit(\"renders without crashing\", () => {\n    const div = document.createElement(\"div\")\n    ReactDOM.render(<Hello name=\"world\" />, div)\n    ReactDOM.unmountComponentAtNode(div)\n})\n            `\n    }, {\n      path: \"src/components/Hello.spec.tsx\",\n      content: `\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Hello from \"./Hello\"\n\nit(\"renders without crashing\", () => {\n    const div = document.createElement(\"div\")\n    ReactDOM.render(<Hello name=\"world\" />, div)\n    ReactDOM.unmountComponentAtNode(div)\n})\n            `\n    }];\n    this.scripts = {\n      start: \"webpack-dev-server --mode development --open\",\n      build: \"webpack --mode production\",\n      test: \"jest\",\n      lint: \"eslint --ext .js,.jsx,.ts,.tsx src\",\n      format: 'prettier --write \"src/**/*.{js,jsx,ts,tsx,json,css,md}\"',\n      precommit: \"lint-staged\",\n      prepush: \"npm run test\"\n    };\n    this.devDependencies = [\"@babel/core\", \"@babel/preset-env\", \"@babel/preset-react\", \"@babel/preset-typescript\", \"@types/jest\", \"@types/node\", \"@types/react\", \"@types/react-dom\", \"@typescript-eslint/eslint-plugin\", \"@typescript-eslint/parser\", \"babel-loader\", \"clean-webpack-plugin\", \"copy-webpack-plugin\", \"css-loader\", \"eslint\", \"eslint-config-prettier\", \"eslint-plugin-prettier\", \"eslint-plugin-react\", \"eslint-plugin-react-hooks\", \"html-webpack-plugin\", \"typescript\", \"jest\", \"prettier\"];\n    this.dependencies = [\"react\", \"react-dom\", \"react-router-dom\", \"webpack\", \"webpack-cli\", \"webpack-dev-server\", \"ts-jest\", \"ts-loader\", \"style-loader\", \"file-loader\"];\n    this.globalDependencies = [\"typescript\", \"webpack\", \"webpack-cli\", \"webpack-dev-server\", \"ts-jest\", \"ts-loader\", \"jest\"];\n  }\n}\nexports.ExpressTypescript = ExpressTypescript;\n\n//# sourceURL=webpack://@hahnd/dt/./src/utils/templates/express-typescript.ts?");

/***/ }),

/***/ "./src/utils/templates/next-typescript.ts":
/*!************************************************!*\
  !*** ./src/utils/templates/next-typescript.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\n// Description: Next.js TypeScript template\n// Configuration:\n// Target: es2018\n// Module: commonjs\n// Ambient: Browser\n// Addons: prettier, eslint, babel, webpack, and jest\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.NextTypescript = void 0;\nclass NextTypescript {\n  constructor() {\n    this.name = \"next-typescript\";\n    this.folders = [\"src\", \"compile\", \"build\", \"dist\"];\n    this.files = [{\n      path: \"tsconfig.json\",\n      content: `\n{\n    \"compilerOptions\": {\n        \"target\": \"es2018\",\n        \"module\": \"commonjs\",\n        \"baseUrl\": \".\",\n        \"outDir\": \"pre-build\",\n        \"rootDir\": \"src\",\n        \"strict\": true,\n        \"forceConsistentCasingInFileNames\": true,\n        \"esModuleInterop\": true,\n        \"sourceMap\": true,\n        \"typeRoots\": [\"node_modules/@types\"],\n        \"types\": [\"node\"],\n        \"paths\": {\n            \"*\": [\"src/*\"]\n        }\n    },\n    \"include\": [\"src/**/*\"],\n    \"exclude\": [\n        \"node_modules\",\n        \"**/*.spec.ts\",\n        \"**/*.test.ts\",\n        \"**/*.spec.tsx\",\n        \"**/*.test.tsx\",\n        \"pre-build\",\n        \"build\"\n    ]\n}\n            `\n    }, {\n      path: \"src/index.tsx\",\n      content: `console.log('Hello world!')`\n    }, {\n      path: \".prettierrc.json\",\n      content: `\n{\n    \"printWidth\": 80,\n    \"tabWidth\": 4,\n    \"useTabs\": false,\n    \"semi\": true,\n    \"singleQuote\": true,\n    \"trailingComma\": \"es5\",\n    \"bracketSpacing\": true,\n    \"arrowParens\": \"avoid\",\n    \"endOfLine\": \"lf\"\n}\n            `\n    }, {\n      path: \".eslintrc.json\",\n      content: `\n{\n    \"env\": {\n        \"browser\": true,\n        \"es6\": true\n    },\n    \"extends\": [\"eslint:recommended\", \"plugin:react/recommended\", \"plugin:prettier/recommended\"],\n    \"parser\": \"@typescript-eslint/parser\",\n    \"parserOptions\": {\n        \"ecmaFeatures\": {\n            \"jsx\": true\n        },\n        \"ecmaVersion\": 2018,\n        \"sourceType\": \"module\"\n    },\n    \"plugins\": [\"react\", \"prettier\", \"@typescript-eslint\"],\n    \"rules\": {\n        \"prettier/prettier\": \"error\",\n        \"react/prop-types\": 0\n    }\n}\n            `\n    }, {\n      path: \".babelrc\",\n      content: `\n{\n    \"presets\": [\"@babel/preset-env\", \"@babel/preset-react\", \"@babel/preset-typescript\"]\n}\n            `\n    }, {\n      path: \"webpack.config.js\",\n      content: `\nconst path = require(\"path\")\nconst webpack = require(\"webpack\")\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\")\nconst { CleanWebpackPlugin } = require(\"clean-webpack-plugin\")\n\nmodule.exports = {\n    entry: \"./src/index.tsx\",\n    output: {\n        path: path.resolve(__dirname, \"build\"),\n        filename: \"bundle.js\",\n    },\n    resolve: {\n        extensions: [\".ts\", \".tsx\", \".js\", \".jsx\"],\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.tsx?$/,\n                loader: \"babel-loader\",\n            },\n            {\n                test: /\\.css$/,\n                use: [\"style-loader\", \"css-loader\"],\n            },\n        ],\n    },\n    plugins: [\n        new CleanWebpackPlugin(),\n        new HtmlWebpackPlugin({\n            template: \"./src/index.html\",\n        }),\n        new webpack.DefinePlugin({\n            \"process.env.NODE_ENV\": JSON.stringify(process.env.NODE_ENV),\n        }),\n    ],\n    devServer: {\n        contentBase: path.join(__dirname, \"build\"),\n        compress: true,\n        port: 9000,\n    },\n}\n            `\n    }, {\n      path: \"src/index.html\",\n      content: `\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <title>Next.js TypeScript</title>\n    </head>\n    <body>\n        <div id=\"root\"></div>\n    </body>\n</html>\n            `\n    }, {\n      path: \"jest.config.js\",\n      content: `\nmodule.exports = {\n    preset: \"ts-jest\",\n    testEnvironment: \"node\",\n    testRegex: \"(/__tests__/.*|(\\\\.|/)(test|spec))\\\\.(jsx?|tsx?)$\",\n    moduleFileExtensions: [\"ts\", \"tsx\", \"js\", \"jsx\", \"json\", \"node\"],\n}\n            `\n    }, {\n      path: \"src/index.spec.tsx\",\n      content: `\nimport React from \"react\"\nimport { render } from \"@testing-library/react\"\nimport App from \"./index\"\n\ntest(\"renders learn react link\", () => {\n    const { getByText } = render(<App />)\n    const linkElement = getByText(/learn react/i)\n    expect(linkElement).toBeInTheDocument()\n})\n            `\n    }];\n    this.scripts = {\n      build: \"webpack --mode production\",\n      dev: \"webpack serve --mode development\",\n      lint: \"eslint --ext .ts,.tsx,.js,.jsx src\",\n      test: \"jest\",\n      prettier: \"prettier --write .\"\n    };\n    this.devDependencies = [\"@babel/core\", \"@babel/preset-env\", \"@babel/preset-react\", \"@babel/preset-typescript\", \"@types/jest\", \"@types/node\", \"@types/react\", \"@types/react-dom\", \"@types/webpack-env\", \"@typescript-eslint/eslint-plugin\", \"@typescript-eslint/parser\", \"babel-loader\", \"clean-webpack-plugin\", \"css-loader\", \"eslint\", \"eslint-config-prettier\", \"eslint-plugin-prettier\", \"eslint-plugin-react\", \"html-webpack-plugin\", \"jest\", \"prettier\", \"style-loader\", \"ts-jest\", \"ts-loader\", \"typescript\", \"webpack\", \"webpack-cli\", \"webpack-dev-server\"];\n    this.dependencies = [\"react\", \"react-dom\"];\n    this.globalDependencies = [\"typescript\", \"webpack\", \"webpack-cli\", \"webpack-dev-server\", \"ts-loader\", \"babel-loader\", \"jest\", \"ts-jest\", \"eslint\", \"prettier\"];\n  }\n}\nexports.NextTypescript = NextTypescript;\n\n//# sourceURL=webpack://@hahnd/dt/./src/utils/templates/next-typescript.ts?");

/***/ }),

/***/ "./src/utils/templates/react-typescript.ts":
/*!*************************************************!*\
  !*** ./src/utils/templates/react-typescript.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\n// Description: React Typescript template\n// Addons: prettier, eslint, babel, webpack, and jest\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ReactTypescript = void 0;\nclass ReactTypescript {\n  constructor() {\n    this.name = \"react-typescript\";\n    this.folders = [\"src\", \"compile\", \"build\", \"dist\"];\n    this.files = [{\n      path: \"tsconfig.json\",\n      content: `\n{\n    \"compilerOptions\": {\n        \"target\": \"es2018\",\n        \"module\": \"commonjs\",\n        \"baseUrl\": \".\",\n        \"outDir\": \"compile\",\n        \"rootDir\": \"src\",\n        \"strict\": true,\n        \"forceConsistentCasingInFileNames\": true,\n        \"esModuleInterop\": true,\n        \"sourceMap\": true,\n        \"typeRoots\": [\"node_modules/@types\"],\n        \"types\": [\"node\"],\n        \"paths\": {\n            \"*\": [\"src/*\"]\n        }\n    },\n    \"include\": [\"src/**/*\"],\n    \"exclude\": [\n        \"node_modules\",\n        \"**/*.spec.ts\",\n        \"**/*.test.ts\",\n        \"**/*.spec.tsx\",\n        \"**/*.test.tsx\",\n        \"dist\",\n        \"compile\",\n        \"build\"\n    ]\n}\n            `\n    }, {\n      path: \"src/index.tsx\",\n      content: `console.log('Hello world!')`\n    }, {\n      path: \".prettierrc\",\n      content: `\n{\n    \"printWidth\": 80,\n    \"tabWidth\": 4,\n    \"useTabs\": false,\n    \"semi\": true,\n    \"singleQuote\": true,\n    \"trailingComma\": \"es5\",\n    \"bracketSpacing\": true,\n    \"arrowParens\": \"avoid\",\n    \"endOfLine\": \"lf\"\n}\n            `\n    }, {\n      path: \".eslintrc.js\",\n      content: `\nmodule.exports = {\n    root: true,\n    env: {\n        es6: true,\n        node: true,\n        commonjs: true,\n    },\n    parser: \"@babel/eslint-parser\",\n    parserOptions: {\n        ecmaVersion: 2018,\n        sourceType: \"module\",\n    },\n    plugins: [\"import\"],\n    extends: [\n        \"eslint:recommended\",\n        \"plugin:import/errors\",\n        \"plugin:import/warnings\",\n        \"plugin:import/typescript\",\n        \"prettier\",\n    ],\n    rules: {\n        \"import/no-unresolved\": \"error\",\n        \"import/named\": \"error\",\n        \"import/default\": \"error\",\n        \"import/namespace\": \"error\",\n        \"import/no-named-as-default\": \"error\",\n        \"import/no-named-as-default-member\": \"error\",\n        \"import/no-extraneous-dependencies\": [\n            \"error\",\n            { devDependencies: [\"**/*.test.js\", \"**/*.spec.js\"] },\n        ],\n        \"no-unused-vars\": [\"error\", { argsIgnorePattern: \"^_\" }],\n        semi: [\"error\", \"never\"],\n        \"comma-dangle\": [\"error\", \"always-multiline\"],\n        quotes: [\"error\", \"single\"],\n    },\n}\n            `\n    }, {\n      path: \".babelrc\",\n      content: `\nmodule.exports = {\n    presets: [\n        [\n            \"@babel/preset-env\",\n            {\n                targets: {\n                    node: \"current\"\n                }\n            }\n        ],\n        \"@babel/preset-react\",\n        \"@babel/preset-typescript\"\n    ],\n    plugins: [\n        \"@babel/plugin-proposal-class-properties\",\n        \"@babel/plugin-proposal-object-rest-spread\",\n        \"@babel/plugin-transform-runtime\"\n    ]\n}\n            `\n    }, {\n      path: \"webpack.config.js\",\n      content: `\nconst path = require(\"path\")\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\")\nconst { CleanWebpackPlugin } = require(\"clean-webpack-plugin\")\nconst CopyWebpackPlugin = require(\"copy-webpack-plugin\")\n\nmodule.exports = {\n    entry: \"./src/index.tsx\",\n    output: {\n        path: path.resolve(__dirname, \"dist\"),\n        filename: \"bundle.js\",\n    },\n    resolve: {\n        extensions: [\".ts\", \".tsx\", \".js\", \".jsx\"],\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.tsx?$/,\n                loader: \"ts-loader\",\n                exclude: /node_modules/,\n            },\n            {\n                test: /\\.css$/,\n                use: [\"style-loader\", \"css-loader\"],\n            },\n            {\n                test: /\\.(png|svg|jpg|gif)$/,\n                use: [\"file-loader\"],\n            },\n        ],\n    },\n    plugins: [\n        new CleanWebpackPlugin(),\n        new HtmlWebpackPlugin({\n            template: \"./src/public/index.html\",\n        }),\n        new CopyWebpackPlugin({\n            patterns: [\n                {\n                    from: \"src/public/assets\",\n                    to: \"assets\",\n                },\n            ],\n        }),\n    ],\n}\n            `\n    }, {\n      path: \"src/public/index.html\",\n      content: `\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <title>React Typescript</title>\n    </head>\n    <body>\n        <div id=\"root\"></div>\n    </body>\n</html>\n            `\n    }, {\n      path: \"src/index.tsx\",\n      content: `\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nconst App = () => {\n    return <h1>Hello World!</h1>\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n            `\n    }, {\n      path: \"jest.config.js\",\n      content: `\nmodule.exports = {\n    preset: \"ts-jest\",\n    testEnvironment: \"node\",\n    testRegex: \"(/__tests__/.*|(\\\\.|/)(test|spec))\\\\.(jsx?|tsx?)$\",\n    moduleFileExtensions: [\"ts\", \"tsx\", \"js\", \"jsx\", \"json\", \"node\"],\n}\n            `\n    }, {\n      path: \"src/__tests__/index.test.tsx\",\n      content: `\nimport React from \"react\"\nimport { render } from \"@testing-library/react\"\nimport App from \"../index\"\n\ntest(\"renders learn react link\", () => {\n    const { getByText } = render(<App />)\n    const linkElement = getByText(/learn react/i)\n    expect(linkElement).toBeInTheDocument()\n})\n            `\n    }];\n    this.scripts = {\n      start: \"webpack-dev-server --mode development --open\",\n      build: \"webpack --mode production\",\n      test: \"jest\",\n      lint: \"eslint --ext .js,.jsx,.ts,.tsx src\",\n      format: 'prettier --write \"src/**/*.{js,jsx,ts,tsx,json,css,md}\"',\n      precommit: \"lint-staged\",\n      prepush: \"npm run test\"\n    };\n    this.devDependencies = [\"@babel/core\", \"@babel/plugin-proposal-class-properties\", \"@babel/plugin-proposal-object-rest-spread\", \"@babel/plugin-transform-runtime\", \"@babel/preset-env\", \"@babel/preset-react\", \"@babel/preset-typescript\", \"@types/jest\", \"@types/node\", \"@types/react\", \"@types/react-dom\", \"@typescript-eslint/eslint-plugin\", \"@typescript-eslint/parser\", \"babel-loader\", \"clean-webpack-plugin\", \"copy-webpack-plugin\", \"css-loader\", \"eslint\", \"eslint-config-prettier\", \"eslint-plugin-prettier\", \"eslint-plugin-react\", \"html-webpack-plugin\", \"husky\", \"jest\", \"lint-staged\", \"prettier\"];\n    this.dependencies = [\"react\", \"react-dom\", \"react-router-dom\", \"ts-jest\", \"typescript\", \"webpack\", \"webpack-cli\", \"webpack-dev-server\", \"style-loader\", \"file-loader\"];\n    this.globalDependencies = [\"typescript\", \"webpack\", \"webpack-cli\", \"webpack-dev-server\", \"ts-jest\", \"jest\", \"eslint\", \"prettier\"];\n  }\n}\nexports.ReactTypescript = ReactTypescript;\n\n//# sourceURL=webpack://@hahnd/dt/./src/utils/templates/react-typescript.ts?");

/***/ }),

/***/ "./src/utils/templates/tkinter-python.ts":
/*!***********************************************!*\
  !*** ./src/utils/templates/tkinter-python.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\n// Description: Template for tkinter python\n// Addons: tkinter, and python\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.TkinterPython = void 0;\nclass TkinterPython {\n  constructor() {\n    this.name = \"tkinter-python\";\n    this.folders = [\"src\", \"compile\", \"build\", \"dist\"];\n    this.files = [{\n      path: \"src/main.py\",\n      content: `\nimport tkinter as tk\n\nroot = tk.Tk()\nroot.title(\"Hello World\")\nroot.geometry(\"400x400\")\n\nlabel = tk.Label(root, text=\"Hello World\")\nlabel.pack()\n\nroot.mainloop()\n            `\n    }];\n  }\n}\nexports.TkinterPython = TkinterPython;\n\n//# sourceURL=webpack://@hahnd/dt/./src/utils/templates/tkinter-python.ts?");

/***/ }),

/***/ "./src/utils/terminal-log.ts":
/*!***********************************!*\
  !*** ./src/utils/terminal-log.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.terminal = void 0;\nconst icon_text_1 = __webpack_require__(/*! utils/icon-text */ \"./src/utils/icon-text.ts\");\nclass terminal {\n  static log(icon) {\n    const msgIcon = new icon_text_1.Icons(icon);\n    for (var _len = arguments.length, text = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      text[_key - 1] = arguments[_key];\n    }\n    const msg = text !== undefined ? ' ' + text : '';\n    console.log(msgIcon + msg);\n  }\n  static logInline(icon, text) {\n    const msgIcon = new icon_text_1.Icons(icon);\n    const msg = text !== undefined ? ' ' + text : '';\n    process.stdout.write(msgIcon + msg);\n  }\n  static label(color, text) {\n    // green color\n    if (color === 'green') {\n      console.log(' [\\x1b[32m' + text + '\\x1b[0m]');\n    }\n    // red color\n    if (color === 'red') {\n      console.log(' [\\x1b[31m' + text + '\\x1b[0m]');\n    }\n    // yellow color\n    if (color === 'yellow') {\n      console.log(' [\\x1b[33m' + text + '\\x1b[0m]');\n    }\n    // blue color\n    if (color === 'blue') {\n      console.log(' [\\x1b[34m' + text + '\\x1b[0m]');\n    }\n    // magenta color\n    if (color === 'magenta') {\n      console.log(' [\\x1b[35m' + text + '\\x1b[0m]');\n    }\n    // cyan color\n    if (color === 'cyan') {\n      console.log(' [\\x1b[36m' + text + '\\x1b[0m]');\n    }\n    // orange color\n    if (color === 'orange') {\n      console.log(' [\\x1b[33m' + text + '\\x1b[0m]');\n    }\n    // white color\n    if (color === 'white') {\n      console.log(' [\\x1b[37m' + text + '\\x1b[0m]');\n    }\n    // gray color\n    if (color === 'gray') {\n      console.log(' [\\x1b[90m' + text + '\\x1b[0m]');\n    }\n  }\n  static fail() {\n    for (var _len2 = arguments.length, text = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      text[_key2] = arguments[_key2];\n    }\n    this.log('fail', text);\n  }\n  static success() {\n    for (var _len3 = arguments.length, text = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      text[_key3] = arguments[_key3];\n    }\n    this.log('success', text);\n  }\n  static done() {\n    for (var _len4 = arguments.length, text = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      text[_key4] = arguments[_key4];\n    }\n    this.log('done', text);\n  }\n  static error() {\n    for (var _len5 = arguments.length, text = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      text[_key5] = arguments[_key5];\n    }\n    this.log('error', text);\n  }\n  static warn() {\n    for (var _len6 = arguments.length, text = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      text[_key6] = arguments[_key6];\n    }\n    this.log('warn', text);\n  }\n  static info() {\n    for (var _len7 = arguments.length, text = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      text[_key7] = arguments[_key7];\n    }\n    this.log('info', text);\n  }\n  static init() {\n    for (var _len8 = arguments.length, text = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      text[_key8] = arguments[_key8];\n    }\n    this.log('init', text);\n  }\n  static debug() {\n    for (var _len9 = arguments.length, text = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      text[_key9] = arguments[_key9];\n    }\n    this.log('debug', ...text);\n    process.exit(0);\n  }\n  static bug() {\n    for (var _len10 = arguments.length, text = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n      text[_key10] = arguments[_key10];\n    }\n    this.log('bug', text);\n  }\n  static green() {\n    for (var _len11 = arguments.length, text = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n      text[_key11] = arguments[_key11];\n    }\n    process.stdout.write('\\x1b[32m' + text + '\\x1b[0m');\n  }\n  static red() {\n    for (var _len12 = arguments.length, text = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n      text[_key12] = arguments[_key12];\n    }\n    process.stdout.write('\\x1b[31m' + text + '\\x1b[0m');\n  }\n  static yellow() {\n    for (var _len13 = arguments.length, text = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {\n      text[_key13] = arguments[_key13];\n    }\n    process.stdout.write('\\x1b[33m' + text + '\\x1b[0m');\n  }\n  static black() {\n    for (var _len14 = arguments.length, text = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {\n      text[_key14] = arguments[_key14];\n    }\n    process.stdout.write('\\x1b[30m' + text + '\\x1b[0m');\n  }\n  static orange() {\n    for (var _len15 = arguments.length, text = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {\n      text[_key15] = arguments[_key15];\n    }\n    process.stdout.write('\\x1b[33m' + text + '\\x1b[0m');\n  }\n  static blue() {\n    for (var _len16 = arguments.length, text = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {\n      text[_key16] = arguments[_key16];\n    }\n    process.stdout.write('\\x1b[34m' + text + '\\x1b[0m');\n  }\n  static magenta() {\n    for (var _len17 = arguments.length, text = new Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {\n      text[_key17] = arguments[_key17];\n    }\n    process.stdout.write('\\x1b[35m' + text + '\\x1b[0m');\n  }\n  static cyan() {\n    for (var _len18 = arguments.length, text = new Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {\n      text[_key18] = arguments[_key18];\n    }\n    process.stdout.write('\\x1b[36m' + text + '\\x1b[0m');\n  }\n  static white() {\n    for (var _len19 = arguments.length, text = new Array(_len19), _key19 = 0; _key19 < _len19; _key19++) {\n      text[_key19] = arguments[_key19];\n    }\n    process.stdout.write('\\x1b[37m' + text + '\\x1b[0m');\n  }\n  static gray() {\n    for (var _len20 = arguments.length, text = new Array(_len20), _key20 = 0; _key20 < _len20; _key20++) {\n      text[_key20] = arguments[_key20];\n    }\n    process.stdout.write('\\x1b[90m' + text + '\\x1b[0m');\n  }\n  static grey() {\n    for (var _len21 = arguments.length, text = new Array(_len21), _key21 = 0; _key21 < _len21; _key21++) {\n      text[_key21] = arguments[_key21];\n    }\n    process.stdout.write('\\x1b[90m' + text + '\\x1b[0m');\n  }\n  static bold() {\n    for (var _len22 = arguments.length, text = new Array(_len22), _key22 = 0; _key22 < _len22; _key22++) {\n      text[_key22] = arguments[_key22];\n    }\n    process.stdout.write('\\x1b[1m' + text + '\\x1b[0m');\n  }\n  static italic() {\n    for (var _len23 = arguments.length, text = new Array(_len23), _key23 = 0; _key23 < _len23; _key23++) {\n      text[_key23] = arguments[_key23];\n    }\n    process.stdout.write('\\x1b[3m' + text + '\\x1b[0m');\n  }\n  static underline() {\n    for (var _len24 = arguments.length, text = new Array(_len24), _key24 = 0; _key24 < _len24; _key24++) {\n      text[_key24] = arguments[_key24];\n    }\n    process.stdout.write('\\x1b[4m' + text + '\\x1b[0m');\n  }\n  static inverse() {\n    for (var _len25 = arguments.length, text = new Array(_len25), _key25 = 0; _key25 < _len25; _key25++) {\n      text[_key25] = arguments[_key25];\n    }\n    process.stdout.write('\\x1b[7m' + text + '\\x1b[0m');\n  }\n  static strikethrough() {\n    for (var _len26 = arguments.length, text = new Array(_len26), _key26 = 0; _key26 < _len26; _key26++) {\n      text[_key26] = arguments[_key26];\n    }\n    process.stdout.write('\\x1b[9m' + text + '\\x1b[0m');\n  }\n  static hidden() {\n    for (var _len27 = arguments.length, text = new Array(_len27), _key27 = 0; _key27 < _len27; _key27++) {\n      text[_key27] = arguments[_key27];\n    }\n    process.stdout.write('\\x1b[8m' + text + '\\x1b[0m');\n  }\n  static reset() {\n    process.stdout.write('\\x1b[0m');\n  }\n  static clear() {\n    console.clear();\n  }\n  static clearLine() {\n    console.log('\\x1b[2K');\n  }\n  static cursorTo(x, y) {\n    console.log('\\x1b[' + (y || '') + ';' + x + 'f');\n  }\n  static cursorMove(x, y) {\n    console.log('\\x1b[' + (y || '') + ';' + x + 'f');\n  }\n  static cursorUp(count) {\n    console.log('\\x1b[' + (count || '') + 'A');\n  }\n  static cursorDown(count) {\n    console.log('\\x1b[' + (count || '') + 'B');\n  }\n  static cursorForward(count) {\n    console.log('\\x1b[' + (count || '') + 'C');\n  }\n  static cursorBackward(count) {\n    console.log('\\x1b[' + (count || '') + 'D');\n  }\n  static cursorLeft(count) {\n    console.log('\\x1b[' + (count || '') + 'D');\n  }\n  static cursorRight(count) {\n    console.log('\\x1b[' + (count || '') + 'C');\n  }\n  static cursorNextLine(count) {\n    console.log('\\x1b[' + (count || '') + 'E');\n  }\n  static cursorPrevLine(count) {\n    console.log('\\x1b[' + (count || '') + 'F');\n  }\n}\nexports.terminal = terminal;\n\n//# sourceURL=webpack://@hahnd/dt/./src/utils/terminal-log.ts?");

/***/ }),

/***/ "@commander-js/extra-typings":
/*!**********************************************!*\
  !*** external "@commander-js/extra-typings" ***!
  \**********************************************/
/***/ ((module) => {

module.exports = require("@commander-js/extra-typings");

/***/ }),

/***/ "prompts":
/*!**************************!*\
  !*** external "prompts" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("prompts");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("child_process");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/dt.ts");
/******/ 	
/******/ })()
;